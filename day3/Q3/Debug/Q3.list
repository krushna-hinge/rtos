
Q3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003be0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003d70  08003d70  00004d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dd0  08003dd0  00005060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003dd0  08003dd0  00004dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dd8  08003dd8  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dd8  08003dd8  00004dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ddc  08003ddc  00004ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003de0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005060  2**0
                  CONTENTS
 10 .bss          000041e8  20000060  20000060  00005060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004248  20004248  00005060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012bf9  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a51  00000000  00000000  00017c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  0001a6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc4  00000000  00000000  0001b748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000227cc  00000000  00000000  0001c40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000115bb  00000000  00000000  0003ebd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d354b  00000000  00000000  00050193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001236de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004748  00000000  00000000  00123724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  00127e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003d58 	.word	0x08003d58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08003d58 	.word	0x08003d58

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000007c 	.word	0x2000007c
 800053c:	2000011c 	.word	0x2000011c

08000540 <vUartSend>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vUartSend(void *pvParam)
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b087      	sub	sp, #28
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	char str[]= "Hello Word ! \r\n";
 8000548:	4b0c      	ldr	r3, [pc, #48]	@ (800057c <vUartSend+0x3c>)
 800054a:	f107 0408 	add.w	r4, r7, #8
 800054e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	while(1)
	{
		HAL_UART_Transmit(&huart2,(uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 8000554:	f107 0308 	add.w	r3, r7, #8
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff fe39 	bl	80001d0 <strlen>
 800055e:	4603      	mov	r3, r0
 8000560:	b29a      	uxth	r2, r3
 8000562:	f107 0108 	add.w	r1, r7, #8
 8000566:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800056a:	4805      	ldr	r0, [pc, #20]	@ (8000580 <vUartSend+0x40>)
 800056c:	f001 fcca 	bl	8001f04 <HAL_UART_Transmit>
		vTaskDelay(1000/portTICK_RATE_MS);
 8000570:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000574:	f002 fb64 	bl	8002c40 <vTaskDelay>
		HAL_UART_Transmit(&huart2,(uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 8000578:	bf00      	nop
 800057a:	e7eb      	b.n	8000554 <vUartSend+0x14>
 800057c:	08003d70 	.word	0x08003d70
 8000580:	2000031c 	.word	0x2000031c

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b08a      	sub	sp, #40	@ 0x28
 8000588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fa45 	bl	8000a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f82b 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f8bd 	bl	8000710 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f891 	bl	80006bc <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800059a:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <main+0x54>)
 800059c:	1d3c      	adds	r4, r7, #4
 800059e:	461d      	mov	r5, r3
 80005a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 f882 	bl	80026ba <osThreadCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a08      	ldr	r2, [pc, #32]	@ (80005dc <main+0x58>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(vUartSend,"Uart", configMINIMAL_STACK_SIZE,NULL,5,NULL);
 80005bc:	2300      	movs	r3, #0
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	2305      	movs	r3, #5
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2300      	movs	r3, #0
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	4905      	ldr	r1, [pc, #20]	@ (80005e0 <main+0x5c>)
 80005ca:	4806      	ldr	r0, [pc, #24]	@ (80005e4 <main+0x60>)
 80005cc:	f002 f9e9 	bl	80029a2 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005d0:	f002 f86c 	bl	80026ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <main+0x50>
 80005d8:	08003d94 	.word	0x08003d94
 80005dc:	20000364 	.word	0x20000364
 80005e0:	08003d80 	.word	0x08003d80
 80005e4:	08000541 	.word	0x08000541

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	@ 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	@ 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 facc 	bl	8003b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b28      	ldr	r3, [pc, #160]	@ (80006b4 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	4a27      	ldr	r2, [pc, #156]	@ (80006b4 <SystemClock_Config+0xcc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	@ 0x40
 800061c:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a21      	ldr	r2, [pc, #132]	@ (80006b8 <SystemClock_Config+0xd0>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000658:	2308      	movs	r3, #8
 800065a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800065c:	2332      	movs	r3, #50	@ 0x32
 800065e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000660:	2304      	movs	r3, #4
 8000662:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000664:	2307      	movs	r3, #7
 8000666:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fc93 	bl	8000f98 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000678:	f000 f87e 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000688:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fef4 	bl	8001488 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006a6:	f000 f867 	bl	8000778 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	@ 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c0:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	@ (800070c <MX_USART2_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c6:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006f4:	f001 fbb6 	bl	8001e64 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fe:	f000 f83b 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000031c 	.word	0x2000031c
 800070c:	40004400 	.word	0x40004400

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <MX_GPIO_Init+0x30>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a08      	ldr	r2, [pc, #32]	@ (8000740 <MX_GPIO_Init+0x30>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <MX_GPIO_Init+0x30>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800

08000744 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f002 f800 	bl	8002752 <osDelay>
 8000752:	e7fb      	b.n	800074c <StartDefaultTask+0x8>

08000754 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a04      	ldr	r2, [pc, #16]	@ (8000774 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d101      	bne.n	800076a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000766:	f000 f979 	bl	8000a5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40010000 	.word	0x40010000

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <Error_Handler+0x8>

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <HAL_MspInit+0x54>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000792:	4a11      	ldr	r2, [pc, #68]	@ (80007d8 <HAL_MspInit+0x54>)
 8000794:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000798:	6453      	str	r3, [r2, #68]	@ 0x44
 800079a:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <HAL_MspInit+0x54>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800079e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <HAL_MspInit+0x54>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ae:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <HAL_MspInit+0x54>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <HAL_MspInit+0x54>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	210f      	movs	r1, #15
 80007c6:	f06f 0001 	mvn.w	r0, #1
 80007ca:	f000 fa1f 	bl	8000c0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	@ 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a19      	ldr	r2, [pc, #100]	@ (8000860 <HAL_UART_MspInit+0x84>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d12b      	bne.n	8000856 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <HAL_UART_MspInit+0x88>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000806:	4a17      	ldr	r2, [pc, #92]	@ (8000864 <HAL_UART_MspInit+0x88>)
 8000808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800080c:	6413      	str	r3, [r2, #64]	@ 0x40
 800080e:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <HAL_UART_MspInit+0x88>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <HAL_UART_MspInit+0x88>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a10      	ldr	r2, [pc, #64]	@ (8000864 <HAL_UART_MspInit+0x88>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <HAL_UART_MspInit+0x88>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000836:	230c      	movs	r3, #12
 8000838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000842:	2303      	movs	r3, #3
 8000844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000846:	2307      	movs	r3, #7
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	@ (8000868 <HAL_UART_MspInit+0x8c>)
 8000852:	f000 fa05 	bl	8000c60 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	@ 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40004400 	.word	0x40004400
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000

0800086c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	@ 0x30
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b2f      	ldr	r3, [pc, #188]	@ (8000940 <HAL_InitTick+0xd4>)
 8000882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000884:	4a2e      	ldr	r2, [pc, #184]	@ (8000940 <HAL_InitTick+0xd4>)
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	6453      	str	r3, [r2, #68]	@ 0x44
 800088c:	4b2c      	ldr	r3, [pc, #176]	@ (8000940 <HAL_InitTick+0xd4>)
 800088e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000898:	f107 020c 	add.w	r2, r7, #12
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4611      	mov	r1, r2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 f810 	bl	80018c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80008a8:	f000 fffa 	bl	80018a0 <HAL_RCC_GetPCLK2Freq>
 80008ac:	4603      	mov	r3, r0
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008b4:	4a23      	ldr	r2, [pc, #140]	@ (8000944 <HAL_InitTick+0xd8>)
 80008b6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ba:	0c9b      	lsrs	r3, r3, #18
 80008bc:	3b01      	subs	r3, #1
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008c0:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <HAL_InitTick+0xdc>)
 80008c2:	4a22      	ldr	r2, [pc, #136]	@ (800094c <HAL_InitTick+0xe0>)
 80008c4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008c6:	4b20      	ldr	r3, [pc, #128]	@ (8000948 <HAL_InitTick+0xdc>)
 80008c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000948 <HAL_InitTick+0xdc>)
 80008d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000948 <HAL_InitTick+0xdc>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008da:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <HAL_InitTick+0xdc>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e0:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <HAL_InitTick+0xdc>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008e6:	4818      	ldr	r0, [pc, #96]	@ (8000948 <HAL_InitTick+0xdc>)
 80008e8:	f001 f820 	bl	800192c <HAL_TIM_Base_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80008f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d11b      	bne.n	8000932 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008fa:	4813      	ldr	r0, [pc, #76]	@ (8000948 <HAL_InitTick+0xdc>)
 80008fc:	f001 f870 	bl	80019e0 <HAL_TIM_Base_Start_IT>
 8000900:	4603      	mov	r3, r0
 8000902:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000906:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800090a:	2b00      	cmp	r3, #0
 800090c:	d111      	bne.n	8000932 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800090e:	2019      	movs	r0, #25
 8000910:	f000 f998 	bl	8000c44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b0f      	cmp	r3, #15
 8000918:	d808      	bhi.n	800092c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800091a:	2200      	movs	r2, #0
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	2019      	movs	r0, #25
 8000920:	f000 f974 	bl	8000c0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000924:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <HAL_InitTick+0xe4>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6013      	str	r3, [r2, #0]
 800092a:	e002      	b.n	8000932 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800092c:	2301      	movs	r3, #1
 800092e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000932:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000936:	4618      	mov	r0, r3
 8000938:	3730      	adds	r7, #48	@ 0x30
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	431bde83 	.word	0x431bde83
 8000948:	20000368 	.word	0x20000368
 800094c:	40010000 	.word	0x40010000
 8000950:	20000004 	.word	0x20000004

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <NMI_Handler+0x4>

0800095c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <MemManage_Handler+0x4>

0800096c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <UsageFault_Handler+0x4>

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000990:	4802      	ldr	r0, [pc, #8]	@ (800099c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000992:	f001 f895 	bl	8001ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000368 	.word	0x20000368

080009a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <SystemInit+0x20>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009aa:	4a05      	ldr	r2, [pc, #20]	@ (80009c0 <SystemInit+0x20>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009c8:	f7ff ffea 	bl	80009a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009cc:	480c      	ldr	r0, [pc, #48]	@ (8000a00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ce:	490d      	ldr	r1, [pc, #52]	@ (8000a04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a10 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009f2:	f003 f935 	bl	8003c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f6:	f7ff fdc5 	bl	8000584 <main>
  bx  lr    
 80009fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000a08:	08003de0 	.word	0x08003de0
  ldr r2, =_sbss
 8000a0c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a10:	20004248 	.word	0x20004248

08000a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC_IRQHandler>
	...

08000a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <HAL_Init+0x40>)
 8000a22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a28:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a58 <HAL_Init+0x40>)
 8000a2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a07      	ldr	r2, [pc, #28]	@ (8000a58 <HAL_Init+0x40>)
 8000a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f8d8 	bl	8000bf6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a46:	200f      	movs	r0, #15
 8000a48:	f7ff ff10 	bl	800086c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a4c:	f7ff fe9a 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023c00 	.word	0x40023c00

08000a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <HAL_IncTick+0x20>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <HAL_IncTick+0x24>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a04      	ldr	r2, [pc, #16]	@ (8000a80 <HAL_IncTick+0x24>)
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	200003b0 	.word	0x200003b0

08000a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b03      	ldr	r3, [pc, #12]	@ (8000a98 <HAL_GetTick+0x14>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	200003b0 	.word	0x200003b0

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	@ (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	@ (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db0b      	blt.n	8000b2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f003 021f 	and.w	r2, r3, #31
 8000b18:	4907      	ldr	r1, [pc, #28]	@ (8000b38 <__NVIC_EnableIRQ+0x38>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	095b      	lsrs	r3, r3, #5
 8000b20:	2001      	movs	r0, #1
 8000b22:	fa00 f202 	lsl.w	r2, r0, r2
 8000b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	@ (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	@ (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	@ 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
         );
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	@ 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ff4c 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
 8000c18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1e:	f7ff ff61 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	68b9      	ldr	r1, [r7, #8]
 8000c28:	6978      	ldr	r0, [r7, #20]
 8000c2a:	f7ff ffb1 	bl	8000b90 <NVIC_EncodePriority>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c34:	4611      	mov	r1, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff80 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c3c:	bf00      	nop
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ff54 	bl	8000b00 <__NVIC_EnableIRQ>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	@ 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	e16b      	b.n	8000f54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	f040 815a 	bne.w	8000f4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d005      	beq.n	8000cb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d130      	bne.n	8000d14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce8:	2201      	movs	r2, #1
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	f003 0201 	and.w	r2, r3, #1
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d017      	beq.n	8000d50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d123      	bne.n	8000da4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	08da      	lsrs	r2, r3, #3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3208      	adds	r2, #8
 8000d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	220f      	movs	r2, #15
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	691a      	ldr	r2, [r3, #16]
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	08da      	lsrs	r2, r3, #3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3208      	adds	r2, #8
 8000d9e:	69b9      	ldr	r1, [r7, #24]
 8000da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0203 	and.w	r2, r3, #3
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 80b4 	beq.w	8000f4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b60      	ldr	r3, [pc, #384]	@ (8000f6c <HAL_GPIO_Init+0x30c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dee:	4a5f      	ldr	r2, [pc, #380]	@ (8000f6c <HAL_GPIO_Init+0x30c>)
 8000df0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000df6:	4b5d      	ldr	r3, [pc, #372]	@ (8000f6c <HAL_GPIO_Init+0x30c>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e02:	4a5b      	ldr	r2, [pc, #364]	@ (8000f70 <HAL_GPIO_Init+0x310>)
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	089b      	lsrs	r3, r3, #2
 8000e08:	3302      	adds	r3, #2
 8000e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	220f      	movs	r2, #15
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a52      	ldr	r2, [pc, #328]	@ (8000f74 <HAL_GPIO_Init+0x314>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d02b      	beq.n	8000e86 <HAL_GPIO_Init+0x226>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a51      	ldr	r2, [pc, #324]	@ (8000f78 <HAL_GPIO_Init+0x318>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d025      	beq.n	8000e82 <HAL_GPIO_Init+0x222>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a50      	ldr	r2, [pc, #320]	@ (8000f7c <HAL_GPIO_Init+0x31c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d01f      	beq.n	8000e7e <HAL_GPIO_Init+0x21e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4f      	ldr	r2, [pc, #316]	@ (8000f80 <HAL_GPIO_Init+0x320>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d019      	beq.n	8000e7a <HAL_GPIO_Init+0x21a>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4e      	ldr	r2, [pc, #312]	@ (8000f84 <HAL_GPIO_Init+0x324>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d013      	beq.n	8000e76 <HAL_GPIO_Init+0x216>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4d      	ldr	r2, [pc, #308]	@ (8000f88 <HAL_GPIO_Init+0x328>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d00d      	beq.n	8000e72 <HAL_GPIO_Init+0x212>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4c      	ldr	r2, [pc, #304]	@ (8000f8c <HAL_GPIO_Init+0x32c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d007      	beq.n	8000e6e <HAL_GPIO_Init+0x20e>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4b      	ldr	r2, [pc, #300]	@ (8000f90 <HAL_GPIO_Init+0x330>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d101      	bne.n	8000e6a <HAL_GPIO_Init+0x20a>
 8000e66:	2307      	movs	r3, #7
 8000e68:	e00e      	b.n	8000e88 <HAL_GPIO_Init+0x228>
 8000e6a:	2308      	movs	r3, #8
 8000e6c:	e00c      	b.n	8000e88 <HAL_GPIO_Init+0x228>
 8000e6e:	2306      	movs	r3, #6
 8000e70:	e00a      	b.n	8000e88 <HAL_GPIO_Init+0x228>
 8000e72:	2305      	movs	r3, #5
 8000e74:	e008      	b.n	8000e88 <HAL_GPIO_Init+0x228>
 8000e76:	2304      	movs	r3, #4
 8000e78:	e006      	b.n	8000e88 <HAL_GPIO_Init+0x228>
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e004      	b.n	8000e88 <HAL_GPIO_Init+0x228>
 8000e7e:	2302      	movs	r3, #2
 8000e80:	e002      	b.n	8000e88 <HAL_GPIO_Init+0x228>
 8000e82:	2301      	movs	r3, #1
 8000e84:	e000      	b.n	8000e88 <HAL_GPIO_Init+0x228>
 8000e86:	2300      	movs	r3, #0
 8000e88:	69fa      	ldr	r2, [r7, #28]
 8000e8a:	f002 0203 	and.w	r2, r2, #3
 8000e8e:	0092      	lsls	r2, r2, #2
 8000e90:	4093      	lsls	r3, r2
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e98:	4935      	ldr	r1, [pc, #212]	@ (8000f70 <HAL_GPIO_Init+0x310>)
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	089b      	lsrs	r3, r3, #2
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8000f94 <HAL_GPIO_Init+0x334>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eca:	4a32      	ldr	r2, [pc, #200]	@ (8000f94 <HAL_GPIO_Init+0x334>)
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ed0:	4b30      	ldr	r3, [pc, #192]	@ (8000f94 <HAL_GPIO_Init+0x334>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ef4:	4a27      	ldr	r2, [pc, #156]	@ (8000f94 <HAL_GPIO_Init+0x334>)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000efa:	4b26      	ldr	r3, [pc, #152]	@ (8000f94 <HAL_GPIO_Init+0x334>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f1e:	4a1d      	ldr	r2, [pc, #116]	@ (8000f94 <HAL_GPIO_Init+0x334>)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	@ (8000f94 <HAL_GPIO_Init+0x334>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f48:	4a12      	ldr	r2, [pc, #72]	@ (8000f94 <HAL_GPIO_Init+0x334>)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3301      	adds	r3, #1
 8000f52:	61fb      	str	r3, [r7, #28]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	2b0f      	cmp	r3, #15
 8000f58:	f67f ae90 	bls.w	8000c7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3724      	adds	r7, #36	@ 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40013800 	.word	0x40013800
 8000f74:	40020000 	.word	0x40020000
 8000f78:	40020400 	.word	0x40020400
 8000f7c:	40020800 	.word	0x40020800
 8000f80:	40020c00 	.word	0x40020c00
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40021400 	.word	0x40021400
 8000f8c:	40021800 	.word	0x40021800
 8000f90:	40021c00 	.word	0x40021c00
 8000f94:	40013c00 	.word	0x40013c00

08000f98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e267      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d075      	beq.n	80010a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000fb6:	4b88      	ldr	r3, [pc, #544]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d00c      	beq.n	8000fdc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fc2:	4b85      	ldr	r3, [pc, #532]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000fca:	2b08      	cmp	r3, #8
 8000fcc:	d112      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fce:	4b82      	ldr	r3, [pc, #520]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000fda:	d10b      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fdc:	4b7e      	ldr	r3, [pc, #504]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d05b      	beq.n	80010a0 <HAL_RCC_OscConfig+0x108>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d157      	bne.n	80010a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e242      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ffc:	d106      	bne.n	800100c <HAL_RCC_OscConfig+0x74>
 8000ffe:	4b76      	ldr	r3, [pc, #472]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a75      	ldr	r2, [pc, #468]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	e01d      	b.n	8001048 <HAL_RCC_OscConfig+0xb0>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0x98>
 8001016:	4b70      	ldr	r3, [pc, #448]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a6f      	ldr	r2, [pc, #444]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 800101c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	4b6d      	ldr	r3, [pc, #436]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a6c      	ldr	r2, [pc, #432]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e00b      	b.n	8001048 <HAL_RCC_OscConfig+0xb0>
 8001030:	4b69      	ldr	r3, [pc, #420]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a68      	ldr	r2, [pc, #416]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b66      	ldr	r3, [pc, #408]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a65      	ldr	r2, [pc, #404]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001042:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d013      	beq.n	8001078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fd18 	bl	8000a84 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001058:	f7ff fd14 	bl	8000a84 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b64      	cmp	r3, #100	@ 0x64
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e207      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106a:	4b5b      	ldr	r3, [pc, #364]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0xc0>
 8001076:	e014      	b.n	80010a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff fd04 	bl	8000a84 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001080:	f7ff fd00 	bl	8000a84 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b64      	cmp	r3, #100	@ 0x64
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e1f3      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001092:	4b51      	ldr	r3, [pc, #324]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f0      	bne.n	8001080 <HAL_RCC_OscConfig+0xe8>
 800109e:	e000      	b.n	80010a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d063      	beq.n	8001176 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010ae:	4b4a      	ldr	r3, [pc, #296]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00b      	beq.n	80010d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ba:	4b47      	ldr	r3, [pc, #284]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010c2:	2b08      	cmp	r3, #8
 80010c4:	d11c      	bne.n	8001100 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010c6:	4b44      	ldr	r3, [pc, #272]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d116      	bne.n	8001100 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d2:	4b41      	ldr	r3, [pc, #260]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d005      	beq.n	80010ea <HAL_RCC_OscConfig+0x152>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d001      	beq.n	80010ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e1c7      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ea:	4b3b      	ldr	r3, [pc, #236]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	4937      	ldr	r1, [pc, #220]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fe:	e03a      	b.n	8001176 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d020      	beq.n	800114a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001108:	4b34      	ldr	r3, [pc, #208]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 800110a:	2201      	movs	r2, #1
 800110c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800110e:	f7ff fcb9 	bl	8000a84 <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001114:	e008      	b.n	8001128 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001116:	f7ff fcb5 	bl	8000a84 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e1a8      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001128:	4b2b      	ldr	r3, [pc, #172]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f0      	beq.n	8001116 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001134:	4b28      	ldr	r3, [pc, #160]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	4925      	ldr	r1, [pc, #148]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001144:	4313      	orrs	r3, r2
 8001146:	600b      	str	r3, [r1, #0]
 8001148:	e015      	b.n	8001176 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800114a:	4b24      	ldr	r3, [pc, #144]	@ (80011dc <HAL_RCC_OscConfig+0x244>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001150:	f7ff fc98 	bl	8000a84 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001158:	f7ff fc94 	bl	8000a84 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e187      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116a:	4b1b      	ldr	r3, [pc, #108]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	2b00      	cmp	r3, #0
 8001180:	d036      	beq.n	80011f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d016      	beq.n	80011b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <HAL_RCC_OscConfig+0x248>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001190:	f7ff fc78 	bl	8000a84 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001198:	f7ff fc74 	bl	8000a84 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e167      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <HAL_RCC_OscConfig+0x240>)
 80011ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0x200>
 80011b6:	e01b      	b.n	80011f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b8:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <HAL_RCC_OscConfig+0x248>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011be:	f7ff fc61 	bl	8000a84 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c4:	e00e      	b.n	80011e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c6:	f7ff fc5d 	bl	8000a84 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d907      	bls.n	80011e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e150      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
 80011d8:	40023800 	.word	0x40023800
 80011dc:	42470000 	.word	0x42470000
 80011e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e4:	4b88      	ldr	r3, [pc, #544]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 80011e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1ea      	bne.n	80011c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 8097 	beq.w	800132c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001202:	4b81      	ldr	r3, [pc, #516]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10f      	bne.n	800122e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	4b7d      	ldr	r3, [pc, #500]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	4a7c      	ldr	r2, [pc, #496]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800121c:	6413      	str	r3, [r2, #64]	@ 0x40
 800121e:	4b7a      	ldr	r3, [pc, #488]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800122a:	2301      	movs	r3, #1
 800122c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122e:	4b77      	ldr	r3, [pc, #476]	@ (800140c <HAL_RCC_OscConfig+0x474>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001236:	2b00      	cmp	r3, #0
 8001238:	d118      	bne.n	800126c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800123a:	4b74      	ldr	r3, [pc, #464]	@ (800140c <HAL_RCC_OscConfig+0x474>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a73      	ldr	r2, [pc, #460]	@ (800140c <HAL_RCC_OscConfig+0x474>)
 8001240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001246:	f7ff fc1d 	bl	8000a84 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124e:	f7ff fc19 	bl	8000a84 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e10c      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001260:	4b6a      	ldr	r3, [pc, #424]	@ (800140c <HAL_RCC_OscConfig+0x474>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d106      	bne.n	8001282 <HAL_RCC_OscConfig+0x2ea>
 8001274:	4b64      	ldr	r3, [pc, #400]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001278:	4a63      	ldr	r2, [pc, #396]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001280:	e01c      	b.n	80012bc <HAL_RCC_OscConfig+0x324>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b05      	cmp	r3, #5
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x30c>
 800128a:	4b5f      	ldr	r3, [pc, #380]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 800128c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800128e:	4a5e      	ldr	r2, [pc, #376]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	6713      	str	r3, [r2, #112]	@ 0x70
 8001296:	4b5c      	ldr	r3, [pc, #368]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800129a:	4a5b      	ldr	r2, [pc, #364]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80012a2:	e00b      	b.n	80012bc <HAL_RCC_OscConfig+0x324>
 80012a4:	4b58      	ldr	r3, [pc, #352]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 80012a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012a8:	4a57      	ldr	r2, [pc, #348]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 80012aa:	f023 0301 	bic.w	r3, r3, #1
 80012ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80012b0:	4b55      	ldr	r3, [pc, #340]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 80012b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012b4:	4a54      	ldr	r2, [pc, #336]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 80012b6:	f023 0304 	bic.w	r3, r3, #4
 80012ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d015      	beq.n	80012f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c4:	f7ff fbde 	bl	8000a84 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ca:	e00a      	b.n	80012e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012cc:	f7ff fbda 	bl	8000a84 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012da:	4293      	cmp	r3, r2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e0cb      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e2:	4b49      	ldr	r3, [pc, #292]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 80012e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0ee      	beq.n	80012cc <HAL_RCC_OscConfig+0x334>
 80012ee:	e014      	b.n	800131a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f0:	f7ff fbc8 	bl	8000a84 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f6:	e00a      	b.n	800130e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f8:	f7ff fbc4 	bl	8000a84 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001306:	4293      	cmp	r3, r2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e0b5      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130e:	4b3e      	ldr	r3, [pc, #248]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1ee      	bne.n	80012f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800131a:	7dfb      	ldrb	r3, [r7, #23]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d105      	bne.n	800132c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001320:	4b39      	ldr	r3, [pc, #228]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001324:	4a38      	ldr	r2, [pc, #224]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001326:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800132a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 80a1 	beq.w	8001478 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001336:	4b34      	ldr	r3, [pc, #208]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b08      	cmp	r3, #8
 8001340:	d05c      	beq.n	80013fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d141      	bne.n	80013ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800134a:	4b31      	ldr	r3, [pc, #196]	@ (8001410 <HAL_RCC_OscConfig+0x478>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fb98 	bl	8000a84 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001358:	f7ff fb94 	bl	8000a84 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e087      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800136a:	4b27      	ldr	r3, [pc, #156]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69da      	ldr	r2, [r3, #28]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001384:	019b      	lsls	r3, r3, #6
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800138c:	085b      	lsrs	r3, r3, #1
 800138e:	3b01      	subs	r3, #1
 8001390:	041b      	lsls	r3, r3, #16
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001398:	061b      	lsls	r3, r3, #24
 800139a:	491b      	ldr	r1, [pc, #108]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <HAL_RCC_OscConfig+0x478>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a6:	f7ff fb6d 	bl	8000a84 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ae:	f7ff fb69 	bl	8000a84 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e05c      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c0:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x416>
 80013cc:	e054      	b.n	8001478 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <HAL_RCC_OscConfig+0x478>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fb56 	bl	8000a84 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013dc:	f7ff fb52 	bl	8000a84 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e045      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_RCC_OscConfig+0x470>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x444>
 80013fa:	e03d      	b.n	8001478 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d107      	bne.n	8001414 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e038      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
 8001408:	40023800 	.word	0x40023800
 800140c:	40007000 	.word	0x40007000
 8001410:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001414:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <HAL_RCC_OscConfig+0x4ec>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d028      	beq.n	8001474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800142c:	429a      	cmp	r2, r3
 800142e:	d121      	bne.n	8001474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143a:	429a      	cmp	r2, r3
 800143c:	d11a      	bne.n	8001474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001444:	4013      	ands	r3, r2
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800144a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800144c:	4293      	cmp	r3, r2
 800144e:	d111      	bne.n	8001474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145a:	085b      	lsrs	r3, r3, #1
 800145c:	3b01      	subs	r3, #1
 800145e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001460:	429a      	cmp	r2, r3
 8001462:	d107      	bne.n	8001474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001470:	429a      	cmp	r2, r3
 8001472:	d001      	beq.n	8001478 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800

08001488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0cc      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800149c:	4b68      	ldr	r3, [pc, #416]	@ (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d90c      	bls.n	80014c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014aa:	4b65      	ldr	r3, [pc, #404]	@ (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b2:	4b63      	ldr	r3, [pc, #396]	@ (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d001      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e0b8      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d020      	beq.n	8001512 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014dc:	4b59      	ldr	r3, [pc, #356]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	4a58      	ldr	r2, [pc, #352]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80014e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80014e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0308 	and.w	r3, r3, #8
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014f4:	4b53      	ldr	r3, [pc, #332]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	4a52      	ldr	r2, [pc, #328]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001500:	4b50      	ldr	r3, [pc, #320]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	494d      	ldr	r1, [pc, #308]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	4313      	orrs	r3, r2
 8001510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d044      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d107      	bne.n	8001536 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001526:	4b47      	ldr	r3, [pc, #284]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d119      	bne.n	8001566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e07f      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d003      	beq.n	8001546 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001542:	2b03      	cmp	r3, #3
 8001544:	d107      	bne.n	8001556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001546:	4b3f      	ldr	r3, [pc, #252]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d109      	bne.n	8001566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e06f      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001556:	4b3b      	ldr	r3, [pc, #236]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e067      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001566:	4b37      	ldr	r3, [pc, #220]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f023 0203 	bic.w	r2, r3, #3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	4934      	ldr	r1, [pc, #208]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	4313      	orrs	r3, r2
 8001576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001578:	f7ff fa84 	bl	8000a84 <HAL_GetTick>
 800157c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157e:	e00a      	b.n	8001596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001580:	f7ff fa80 	bl	8000a84 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e04f      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001596:	4b2b      	ldr	r3, [pc, #172]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 020c 	and.w	r2, r3, #12
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d1eb      	bne.n	8001580 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015a8:	4b25      	ldr	r3, [pc, #148]	@ (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d20c      	bcs.n	80015d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b6:	4b22      	ldr	r3, [pc, #136]	@ (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015be:	4b20      	ldr	r3, [pc, #128]	@ (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e032      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015dc:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	4916      	ldr	r1, [pc, #88]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d009      	beq.n	800160e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015fa:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	490e      	ldr	r1, [pc, #56]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	4313      	orrs	r3, r2
 800160c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800160e:	f000 f821 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 8001612:	4602      	mov	r2, r0
 8001614:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	091b      	lsrs	r3, r3, #4
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	490a      	ldr	r1, [pc, #40]	@ (8001648 <HAL_RCC_ClockConfig+0x1c0>)
 8001620:	5ccb      	ldrb	r3, [r1, r3]
 8001622:	fa22 f303 	lsr.w	r3, r2, r3
 8001626:	4a09      	ldr	r2, [pc, #36]	@ (800164c <HAL_RCC_ClockConfig+0x1c4>)
 8001628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800162a:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <HAL_RCC_ClockConfig+0x1c8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff f91c 	bl	800086c <HAL_InitTick>

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023c00 	.word	0x40023c00
 8001644:	40023800 	.word	0x40023800
 8001648:	08003db8 	.word	0x08003db8
 800164c:	20000000 	.word	0x20000000
 8001650:	20000004 	.word	0x20000004

08001654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001658:	b094      	sub	sp, #80	@ 0x50
 800165a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800166c:	4b79      	ldr	r3, [pc, #484]	@ (8001854 <HAL_RCC_GetSysClockFreq+0x200>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b08      	cmp	r3, #8
 8001676:	d00d      	beq.n	8001694 <HAL_RCC_GetSysClockFreq+0x40>
 8001678:	2b08      	cmp	r3, #8
 800167a:	f200 80e1 	bhi.w	8001840 <HAL_RCC_GetSysClockFreq+0x1ec>
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <HAL_RCC_GetSysClockFreq+0x34>
 8001682:	2b04      	cmp	r3, #4
 8001684:	d003      	beq.n	800168e <HAL_RCC_GetSysClockFreq+0x3a>
 8001686:	e0db      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001688:	4b73      	ldr	r3, [pc, #460]	@ (8001858 <HAL_RCC_GetSysClockFreq+0x204>)
 800168a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800168c:	e0db      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800168e:	4b73      	ldr	r3, [pc, #460]	@ (800185c <HAL_RCC_GetSysClockFreq+0x208>)
 8001690:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001692:	e0d8      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001694:	4b6f      	ldr	r3, [pc, #444]	@ (8001854 <HAL_RCC_GetSysClockFreq+0x200>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800169c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800169e:	4b6d      	ldr	r3, [pc, #436]	@ (8001854 <HAL_RCC_GetSysClockFreq+0x200>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d063      	beq.n	8001772 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001854 <HAL_RCC_GetSysClockFreq+0x200>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	099b      	lsrs	r3, r3, #6
 80016b0:	2200      	movs	r2, #0
 80016b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80016b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80016be:	2300      	movs	r3, #0
 80016c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80016c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80016c6:	4622      	mov	r2, r4
 80016c8:	462b      	mov	r3, r5
 80016ca:	f04f 0000 	mov.w	r0, #0
 80016ce:	f04f 0100 	mov.w	r1, #0
 80016d2:	0159      	lsls	r1, r3, #5
 80016d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016d8:	0150      	lsls	r0, r2, #5
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4621      	mov	r1, r4
 80016e0:	1a51      	subs	r1, r2, r1
 80016e2:	6139      	str	r1, [r7, #16]
 80016e4:	4629      	mov	r1, r5
 80016e6:	eb63 0301 	sbc.w	r3, r3, r1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016f8:	4659      	mov	r1, fp
 80016fa:	018b      	lsls	r3, r1, #6
 80016fc:	4651      	mov	r1, sl
 80016fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001702:	4651      	mov	r1, sl
 8001704:	018a      	lsls	r2, r1, #6
 8001706:	4651      	mov	r1, sl
 8001708:	ebb2 0801 	subs.w	r8, r2, r1
 800170c:	4659      	mov	r1, fp
 800170e:	eb63 0901 	sbc.w	r9, r3, r1
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800171e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001722:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001726:	4690      	mov	r8, r2
 8001728:	4699      	mov	r9, r3
 800172a:	4623      	mov	r3, r4
 800172c:	eb18 0303 	adds.w	r3, r8, r3
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	462b      	mov	r3, r5
 8001734:	eb49 0303 	adc.w	r3, r9, r3
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001746:	4629      	mov	r1, r5
 8001748:	024b      	lsls	r3, r1, #9
 800174a:	4621      	mov	r1, r4
 800174c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001750:	4621      	mov	r1, r4
 8001752:	024a      	lsls	r2, r1, #9
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800175a:	2200      	movs	r2, #0
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800175e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001760:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001764:	f7fe fd3c 	bl	80001e0 <__aeabi_uldivmod>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4613      	mov	r3, r2
 800176e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001770:	e058      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001772:	4b38      	ldr	r3, [pc, #224]	@ (8001854 <HAL_RCC_GetSysClockFreq+0x200>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	2200      	movs	r2, #0
 800177a:	4618      	mov	r0, r3
 800177c:	4611      	mov	r1, r2
 800177e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001782:	623b      	str	r3, [r7, #32]
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
 8001788:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800178c:	4642      	mov	r2, r8
 800178e:	464b      	mov	r3, r9
 8001790:	f04f 0000 	mov.w	r0, #0
 8001794:	f04f 0100 	mov.w	r1, #0
 8001798:	0159      	lsls	r1, r3, #5
 800179a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800179e:	0150      	lsls	r0, r2, #5
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4641      	mov	r1, r8
 80017a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80017aa:	4649      	mov	r1, r9
 80017ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017c4:	ebb2 040a 	subs.w	r4, r2, sl
 80017c8:	eb63 050b 	sbc.w	r5, r3, fp
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	00eb      	lsls	r3, r5, #3
 80017d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017da:	00e2      	lsls	r2, r4, #3
 80017dc:	4614      	mov	r4, r2
 80017de:	461d      	mov	r5, r3
 80017e0:	4643      	mov	r3, r8
 80017e2:	18e3      	adds	r3, r4, r3
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	464b      	mov	r3, r9
 80017e8:	eb45 0303 	adc.w	r3, r5, r3
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017fa:	4629      	mov	r1, r5
 80017fc:	028b      	lsls	r3, r1, #10
 80017fe:	4621      	mov	r1, r4
 8001800:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001804:	4621      	mov	r1, r4
 8001806:	028a      	lsls	r2, r1, #10
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800180e:	2200      	movs	r2, #0
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	61fa      	str	r2, [r7, #28]
 8001814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001818:	f7fe fce2 	bl	80001e0 <__aeabi_uldivmod>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4613      	mov	r3, r2
 8001822:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001824:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <HAL_RCC_GetSysClockFreq+0x200>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	0c1b      	lsrs	r3, r3, #16
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	3301      	adds	r3, #1
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001834:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001836:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001838:	fbb2 f3f3 	udiv	r3, r2, r3
 800183c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800183e:	e002      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001840:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <HAL_RCC_GetSysClockFreq+0x204>)
 8001842:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001848:	4618      	mov	r0, r3
 800184a:	3750      	adds	r7, #80	@ 0x50
 800184c:	46bd      	mov	sp, r7
 800184e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	00f42400 	.word	0x00f42400
 800185c:	007a1200 	.word	0x007a1200

08001860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001864:	4b03      	ldr	r3, [pc, #12]	@ (8001874 <HAL_RCC_GetHCLKFreq+0x14>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000000 	.word	0x20000000

08001878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800187c:	f7ff fff0 	bl	8001860 <HAL_RCC_GetHCLKFreq>
 8001880:	4602      	mov	r2, r0
 8001882:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	0a9b      	lsrs	r3, r3, #10
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	4903      	ldr	r1, [pc, #12]	@ (800189c <HAL_RCC_GetPCLK1Freq+0x24>)
 800188e:	5ccb      	ldrb	r3, [r1, r3]
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001894:	4618      	mov	r0, r3
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	08003dc8 	.word	0x08003dc8

080018a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018a4:	f7ff ffdc 	bl	8001860 <HAL_RCC_GetHCLKFreq>
 80018a8:	4602      	mov	r2, r0
 80018aa:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	0b5b      	lsrs	r3, r3, #13
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	4903      	ldr	r1, [pc, #12]	@ (80018c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018b6:	5ccb      	ldrb	r3, [r1, r3]
 80018b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018bc:	4618      	mov	r0, r3
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40023800 	.word	0x40023800
 80018c4:	08003dc8 	.word	0x08003dc8

080018c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	220f      	movs	r2, #15
 80018d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018d8:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <HAL_RCC_GetClockConfig+0x5c>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 0203 	and.w	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001924 <HAL_RCC_GetClockConfig+0x5c>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <HAL_RCC_GetClockConfig+0x5c>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018fc:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <HAL_RCC_GetClockConfig+0x5c>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	08db      	lsrs	r3, r3, #3
 8001902:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800190a:	4b07      	ldr	r3, [pc, #28]	@ (8001928 <HAL_RCC_GetClockConfig+0x60>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0207 	and.w	r2, r3, #7
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	601a      	str	r2, [r3, #0]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	40023c00 	.word	0x40023c00

0800192c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e041      	b.n	80019c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f839 	bl	80019ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3304      	adds	r3, #4
 8001968:	4619      	mov	r1, r3
 800196a:	4610      	mov	r0, r2
 800196c:	f000 f9c0 	bl	8001cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d001      	beq.n	80019f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e04e      	b.n	8001a96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2202      	movs	r2, #2
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a23      	ldr	r2, [pc, #140]	@ (8001aa4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d022      	beq.n	8001a60 <HAL_TIM_Base_Start_IT+0x80>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a22:	d01d      	beq.n	8001a60 <HAL_TIM_Base_Start_IT+0x80>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1f      	ldr	r2, [pc, #124]	@ (8001aa8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d018      	beq.n	8001a60 <HAL_TIM_Base_Start_IT+0x80>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a1e      	ldr	r2, [pc, #120]	@ (8001aac <HAL_TIM_Base_Start_IT+0xcc>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d013      	beq.n	8001a60 <HAL_TIM_Base_Start_IT+0x80>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d00e      	beq.n	8001a60 <HAL_TIM_Base_Start_IT+0x80>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d009      	beq.n	8001a60 <HAL_TIM_Base_Start_IT+0x80>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a19      	ldr	r2, [pc, #100]	@ (8001ab8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d004      	beq.n	8001a60 <HAL_TIM_Base_Start_IT+0x80>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a18      	ldr	r2, [pc, #96]	@ (8001abc <HAL_TIM_Base_Start_IT+0xdc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d111      	bne.n	8001a84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d010      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f042 0201 	orr.w	r2, r2, #1
 8001a80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a82:	e007      	b.n	8001a94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 0201 	orr.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40010000 	.word	0x40010000
 8001aa8:	40000400 	.word	0x40000400
 8001aac:	40000800 	.word	0x40000800
 8001ab0:	40000c00 	.word	0x40000c00
 8001ab4:	40010400 	.word	0x40010400
 8001ab8:	40014000 	.word	0x40014000
 8001abc:	40001800 	.word	0x40001800

08001ac0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d020      	beq.n	8001b24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d01b      	beq.n	8001b24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f06f 0202 	mvn.w	r2, #2
 8001af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f8d2 	bl	8001cb4 <HAL_TIM_IC_CaptureCallback>
 8001b10:	e005      	b.n	8001b1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f8c4 	bl	8001ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f8d5 	bl	8001cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d020      	beq.n	8001b70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d01b      	beq.n	8001b70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f06f 0204 	mvn.w	r2, #4
 8001b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2202      	movs	r2, #2
 8001b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f8ac 	bl	8001cb4 <HAL_TIM_IC_CaptureCallback>
 8001b5c:	e005      	b.n	8001b6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f89e 	bl	8001ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f8af 	bl	8001cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d020      	beq.n	8001bbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d01b      	beq.n	8001bbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f06f 0208 	mvn.w	r2, #8
 8001b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2204      	movs	r2, #4
 8001b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f886 	bl	8001cb4 <HAL_TIM_IC_CaptureCallback>
 8001ba8:	e005      	b.n	8001bb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f878 	bl	8001ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f889 	bl	8001cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d020      	beq.n	8001c08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d01b      	beq.n	8001c08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f06f 0210 	mvn.w	r2, #16
 8001bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2208      	movs	r2, #8
 8001bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f860 	bl	8001cb4 <HAL_TIM_IC_CaptureCallback>
 8001bf4:	e005      	b.n	8001c02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f852 	bl	8001ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f863 	bl	8001cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00c      	beq.n	8001c2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d007      	beq.n	8001c2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0201 	mvn.w	r2, #1
 8001c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7fe fd94 	bl	8000754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00c      	beq.n	8001c50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d007      	beq.n	8001c50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f900 	bl	8001e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00c      	beq.n	8001c74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d007      	beq.n	8001c74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f834 	bl	8001cdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f003 0320 	and.w	r3, r3, #32
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00c      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d007      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f06f 0220 	mvn.w	r2, #32
 8001c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f8d2 	bl	8001e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c98:	bf00      	nop
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a43      	ldr	r2, [pc, #268]	@ (8001e10 <TIM_Base_SetConfig+0x120>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d013      	beq.n	8001d30 <TIM_Base_SetConfig+0x40>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d0e:	d00f      	beq.n	8001d30 <TIM_Base_SetConfig+0x40>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a40      	ldr	r2, [pc, #256]	@ (8001e14 <TIM_Base_SetConfig+0x124>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d00b      	beq.n	8001d30 <TIM_Base_SetConfig+0x40>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a3f      	ldr	r2, [pc, #252]	@ (8001e18 <TIM_Base_SetConfig+0x128>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d007      	beq.n	8001d30 <TIM_Base_SetConfig+0x40>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a3e      	ldr	r2, [pc, #248]	@ (8001e1c <TIM_Base_SetConfig+0x12c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d003      	beq.n	8001d30 <TIM_Base_SetConfig+0x40>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a3d      	ldr	r2, [pc, #244]	@ (8001e20 <TIM_Base_SetConfig+0x130>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d108      	bne.n	8001d42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a32      	ldr	r2, [pc, #200]	@ (8001e10 <TIM_Base_SetConfig+0x120>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d02b      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d50:	d027      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a2f      	ldr	r2, [pc, #188]	@ (8001e14 <TIM_Base_SetConfig+0x124>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d023      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8001e18 <TIM_Base_SetConfig+0x128>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d01f      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a2d      	ldr	r2, [pc, #180]	@ (8001e1c <TIM_Base_SetConfig+0x12c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d01b      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e20 <TIM_Base_SetConfig+0x130>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d017      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a2b      	ldr	r2, [pc, #172]	@ (8001e24 <TIM_Base_SetConfig+0x134>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d013      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8001e28 <TIM_Base_SetConfig+0x138>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00f      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a29      	ldr	r2, [pc, #164]	@ (8001e2c <TIM_Base_SetConfig+0x13c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00b      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a28      	ldr	r2, [pc, #160]	@ (8001e30 <TIM_Base_SetConfig+0x140>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d007      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a27      	ldr	r2, [pc, #156]	@ (8001e34 <TIM_Base_SetConfig+0x144>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d003      	beq.n	8001da2 <TIM_Base_SetConfig+0xb2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a26      	ldr	r2, [pc, #152]	@ (8001e38 <TIM_Base_SetConfig+0x148>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d108      	bne.n	8001db4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	@ (8001e10 <TIM_Base_SetConfig+0x120>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d003      	beq.n	8001de2 <TIM_Base_SetConfig+0xf2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a10      	ldr	r2, [pc, #64]	@ (8001e20 <TIM_Base_SetConfig+0x130>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d103      	bne.n	8001dea <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	691a      	ldr	r2, [r3, #16]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f043 0204 	orr.w	r2, r3, #4
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	601a      	str	r2, [r3, #0]
}
 8001e02:	bf00      	nop
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40010000 	.word	0x40010000
 8001e14:	40000400 	.word	0x40000400
 8001e18:	40000800 	.word	0x40000800
 8001e1c:	40000c00 	.word	0x40000c00
 8001e20:	40010400 	.word	0x40010400
 8001e24:	40014000 	.word	0x40014000
 8001e28:	40014400 	.word	0x40014400
 8001e2c:	40014800 	.word	0x40014800
 8001e30:	40001800 	.word	0x40001800
 8001e34:	40001c00 	.word	0x40001c00
 8001e38:	40002000 	.word	0x40002000

08001e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e042      	b.n	8001efc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d106      	bne.n	8001e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7fe fca6 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2224      	movs	r2, #36	@ 0x24
 8001e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f973 	bl	8002194 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	695a      	ldr	r2, [r3, #20]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001edc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	@ 0x28
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	4613      	mov	r3, r2
 8001f12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b20      	cmp	r3, #32
 8001f22:	d175      	bne.n	8002010 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <HAL_UART_Transmit+0x2c>
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e06e      	b.n	8002012 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2221      	movs	r2, #33	@ 0x21
 8001f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f42:	f7fe fd9f 	bl	8000a84 <HAL_GetTick>
 8001f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	88fa      	ldrh	r2, [r7, #6]
 8001f4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	88fa      	ldrh	r2, [r7, #6]
 8001f52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f5c:	d108      	bne.n	8001f70 <HAL_UART_Transmit+0x6c>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d104      	bne.n	8001f70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	61bb      	str	r3, [r7, #24]
 8001f6e:	e003      	b.n	8001f78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f78:	e02e      	b.n	8001fd8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2200      	movs	r2, #0
 8001f82:	2180      	movs	r1, #128	@ 0x80
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 f848 	bl	800201a <UART_WaitOnFlagUntilTimeout>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e03a      	b.n	8002012 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10b      	bne.n	8001fba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	61bb      	str	r3, [r7, #24]
 8001fb8:	e007      	b.n	8001fca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	781a      	ldrb	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1cb      	bne.n	8001f7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2140      	movs	r1, #64	@ 0x40
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 f814 	bl	800201a <UART_WaitOnFlagUntilTimeout>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e006      	b.n	8002012 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	e000      	b.n	8002012 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002010:	2302      	movs	r3, #2
  }
}
 8002012:	4618      	mov	r0, r3
 8002014:	3720      	adds	r7, #32
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	603b      	str	r3, [r7, #0]
 8002026:	4613      	mov	r3, r2
 8002028:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800202a:	e03b      	b.n	80020a4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002032:	d037      	beq.n	80020a4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002034:	f7fe fd26 	bl	8000a84 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	6a3a      	ldr	r2, [r7, #32]
 8002040:	429a      	cmp	r2, r3
 8002042:	d302      	bcc.n	800204a <UART_WaitOnFlagUntilTimeout+0x30>
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e03a      	b.n	80020c4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d023      	beq.n	80020a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b80      	cmp	r3, #128	@ 0x80
 8002060:	d020      	beq.n	80020a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b40      	cmp	r3, #64	@ 0x40
 8002066:	d01d      	beq.n	80020a4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b08      	cmp	r3, #8
 8002074:	d116      	bne.n	80020a4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 f81d 	bl	80020cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2208      	movs	r2, #8
 8002096:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e00f      	b.n	80020c4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	4013      	ands	r3, r2
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	bf0c      	ite	eq
 80020b4:	2301      	moveq	r3, #1
 80020b6:	2300      	movne	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d0b4      	beq.n	800202c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b095      	sub	sp, #84	@ 0x54
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	330c      	adds	r3, #12
 80020da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020de:	e853 3f00 	ldrex	r3, [r3]
 80020e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80020e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80020ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	330c      	adds	r3, #12
 80020f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80020f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80020fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80020fc:	e841 2300 	strex	r3, r2, [r1]
 8002100:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1e5      	bne.n	80020d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	3314      	adds	r3, #20
 800210e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	e853 3f00 	ldrex	r3, [r3]
 8002116:	61fb      	str	r3, [r7, #28]
   return(result);
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f023 0301 	bic.w	r3, r3, #1
 800211e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	3314      	adds	r3, #20
 8002126:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002128:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800212a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800212c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800212e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002130:	e841 2300 	strex	r3, r2, [r1]
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1e5      	bne.n	8002108 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002140:	2b01      	cmp	r3, #1
 8002142:	d119      	bne.n	8002178 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	330c      	adds	r3, #12
 800214a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	e853 3f00 	ldrex	r3, [r3]
 8002152:	60bb      	str	r3, [r7, #8]
   return(result);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f023 0310 	bic.w	r3, r3, #16
 800215a:	647b      	str	r3, [r7, #68]	@ 0x44
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	330c      	adds	r3, #12
 8002162:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002164:	61ba      	str	r2, [r7, #24]
 8002166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002168:	6979      	ldr	r1, [r7, #20]
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	e841 2300 	strex	r3, r2, [r1]
 8002170:	613b      	str	r3, [r7, #16]
   return(result);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1e5      	bne.n	8002144 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002186:	bf00      	nop
 8002188:	3754      	adds	r7, #84	@ 0x54
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002198:	b0c0      	sub	sp, #256	@ 0x100
 800219a:	af00      	add	r7, sp, #0
 800219c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80021ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021b0:	68d9      	ldr	r1, [r3, #12]
 80021b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	ea40 0301 	orr.w	r3, r0, r1
 80021bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80021e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80021ec:	f021 010c 	bic.w	r1, r1, #12
 80021f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80021fa:	430b      	orrs	r3, r1
 80021fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800220a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800220e:	6999      	ldr	r1, [r3, #24]
 8002210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	ea40 0301 	orr.w	r3, r0, r1
 800221a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800221c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4b8f      	ldr	r3, [pc, #572]	@ (8002460 <UART_SetConfig+0x2cc>)
 8002224:	429a      	cmp	r2, r3
 8002226:	d005      	beq.n	8002234 <UART_SetConfig+0xa0>
 8002228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4b8d      	ldr	r3, [pc, #564]	@ (8002464 <UART_SetConfig+0x2d0>)
 8002230:	429a      	cmp	r2, r3
 8002232:	d104      	bne.n	800223e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002234:	f7ff fb34 	bl	80018a0 <HAL_RCC_GetPCLK2Freq>
 8002238:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800223c:	e003      	b.n	8002246 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800223e:	f7ff fb1b 	bl	8001878 <HAL_RCC_GetPCLK1Freq>
 8002242:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002250:	f040 810c 	bne.w	800246c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002258:	2200      	movs	r2, #0
 800225a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800225e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002262:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002266:	4622      	mov	r2, r4
 8002268:	462b      	mov	r3, r5
 800226a:	1891      	adds	r1, r2, r2
 800226c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800226e:	415b      	adcs	r3, r3
 8002270:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002272:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002276:	4621      	mov	r1, r4
 8002278:	eb12 0801 	adds.w	r8, r2, r1
 800227c:	4629      	mov	r1, r5
 800227e:	eb43 0901 	adc.w	r9, r3, r1
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800228e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002292:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002296:	4690      	mov	r8, r2
 8002298:	4699      	mov	r9, r3
 800229a:	4623      	mov	r3, r4
 800229c:	eb18 0303 	adds.w	r3, r8, r3
 80022a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80022a4:	462b      	mov	r3, r5
 80022a6:	eb49 0303 	adc.w	r3, r9, r3
 80022aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80022ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80022ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80022be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80022c2:	460b      	mov	r3, r1
 80022c4:	18db      	adds	r3, r3, r3
 80022c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80022c8:	4613      	mov	r3, r2
 80022ca:	eb42 0303 	adc.w	r3, r2, r3
 80022ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80022d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80022d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80022d8:	f7fd ff82 	bl	80001e0 <__aeabi_uldivmod>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4b61      	ldr	r3, [pc, #388]	@ (8002468 <UART_SetConfig+0x2d4>)
 80022e2:	fba3 2302 	umull	r2, r3, r3, r2
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	011c      	lsls	r4, r3, #4
 80022ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022ee:	2200      	movs	r2, #0
 80022f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80022f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80022f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80022fc:	4642      	mov	r2, r8
 80022fe:	464b      	mov	r3, r9
 8002300:	1891      	adds	r1, r2, r2
 8002302:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002304:	415b      	adcs	r3, r3
 8002306:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002308:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800230c:	4641      	mov	r1, r8
 800230e:	eb12 0a01 	adds.w	sl, r2, r1
 8002312:	4649      	mov	r1, r9
 8002314:	eb43 0b01 	adc.w	fp, r3, r1
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002324:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002328:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800232c:	4692      	mov	sl, r2
 800232e:	469b      	mov	fp, r3
 8002330:	4643      	mov	r3, r8
 8002332:	eb1a 0303 	adds.w	r3, sl, r3
 8002336:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800233a:	464b      	mov	r3, r9
 800233c:	eb4b 0303 	adc.w	r3, fp, r3
 8002340:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002350:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002354:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002358:	460b      	mov	r3, r1
 800235a:	18db      	adds	r3, r3, r3
 800235c:	643b      	str	r3, [r7, #64]	@ 0x40
 800235e:	4613      	mov	r3, r2
 8002360:	eb42 0303 	adc.w	r3, r2, r3
 8002364:	647b      	str	r3, [r7, #68]	@ 0x44
 8002366:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800236a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800236e:	f7fd ff37 	bl	80001e0 <__aeabi_uldivmod>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4611      	mov	r1, r2
 8002378:	4b3b      	ldr	r3, [pc, #236]	@ (8002468 <UART_SetConfig+0x2d4>)
 800237a:	fba3 2301 	umull	r2, r3, r3, r1
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2264      	movs	r2, #100	@ 0x64
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	1acb      	subs	r3, r1, r3
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800238e:	4b36      	ldr	r3, [pc, #216]	@ (8002468 <UART_SetConfig+0x2d4>)
 8002390:	fba3 2302 	umull	r2, r3, r3, r2
 8002394:	095b      	lsrs	r3, r3, #5
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800239c:	441c      	add	r4, r3
 800239e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023a2:	2200      	movs	r2, #0
 80023a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80023a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80023ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80023b0:	4642      	mov	r2, r8
 80023b2:	464b      	mov	r3, r9
 80023b4:	1891      	adds	r1, r2, r2
 80023b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80023b8:	415b      	adcs	r3, r3
 80023ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80023c0:	4641      	mov	r1, r8
 80023c2:	1851      	adds	r1, r2, r1
 80023c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80023c6:	4649      	mov	r1, r9
 80023c8:	414b      	adcs	r3, r1
 80023ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80023d8:	4659      	mov	r1, fp
 80023da:	00cb      	lsls	r3, r1, #3
 80023dc:	4651      	mov	r1, sl
 80023de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023e2:	4651      	mov	r1, sl
 80023e4:	00ca      	lsls	r2, r1, #3
 80023e6:	4610      	mov	r0, r2
 80023e8:	4619      	mov	r1, r3
 80023ea:	4603      	mov	r3, r0
 80023ec:	4642      	mov	r2, r8
 80023ee:	189b      	adds	r3, r3, r2
 80023f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80023f4:	464b      	mov	r3, r9
 80023f6:	460a      	mov	r2, r1
 80023f8:	eb42 0303 	adc.w	r3, r2, r3
 80023fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800240c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002410:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002414:	460b      	mov	r3, r1
 8002416:	18db      	adds	r3, r3, r3
 8002418:	62bb      	str	r3, [r7, #40]	@ 0x28
 800241a:	4613      	mov	r3, r2
 800241c:	eb42 0303 	adc.w	r3, r2, r3
 8002420:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002422:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002426:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800242a:	f7fd fed9 	bl	80001e0 <__aeabi_uldivmod>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4b0d      	ldr	r3, [pc, #52]	@ (8002468 <UART_SetConfig+0x2d4>)
 8002434:	fba3 1302 	umull	r1, r3, r3, r2
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	2164      	movs	r1, #100	@ 0x64
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	3332      	adds	r3, #50	@ 0x32
 8002446:	4a08      	ldr	r2, [pc, #32]	@ (8002468 <UART_SetConfig+0x2d4>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	f003 0207 	and.w	r2, r3, #7
 8002452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4422      	add	r2, r4
 800245a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800245c:	e106      	b.n	800266c <UART_SetConfig+0x4d8>
 800245e:	bf00      	nop
 8002460:	40011000 	.word	0x40011000
 8002464:	40011400 	.word	0x40011400
 8002468:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800246c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002470:	2200      	movs	r2, #0
 8002472:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002476:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800247a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800247e:	4642      	mov	r2, r8
 8002480:	464b      	mov	r3, r9
 8002482:	1891      	adds	r1, r2, r2
 8002484:	6239      	str	r1, [r7, #32]
 8002486:	415b      	adcs	r3, r3
 8002488:	627b      	str	r3, [r7, #36]	@ 0x24
 800248a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800248e:	4641      	mov	r1, r8
 8002490:	1854      	adds	r4, r2, r1
 8002492:	4649      	mov	r1, r9
 8002494:	eb43 0501 	adc.w	r5, r3, r1
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	00eb      	lsls	r3, r5, #3
 80024a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024a6:	00e2      	lsls	r2, r4, #3
 80024a8:	4614      	mov	r4, r2
 80024aa:	461d      	mov	r5, r3
 80024ac:	4643      	mov	r3, r8
 80024ae:	18e3      	adds	r3, r4, r3
 80024b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80024b4:	464b      	mov	r3, r9
 80024b6:	eb45 0303 	adc.w	r3, r5, r3
 80024ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80024be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80024ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80024da:	4629      	mov	r1, r5
 80024dc:	008b      	lsls	r3, r1, #2
 80024de:	4621      	mov	r1, r4
 80024e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024e4:	4621      	mov	r1, r4
 80024e6:	008a      	lsls	r2, r1, #2
 80024e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80024ec:	f7fd fe78 	bl	80001e0 <__aeabi_uldivmod>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4b60      	ldr	r3, [pc, #384]	@ (8002678 <UART_SetConfig+0x4e4>)
 80024f6:	fba3 2302 	umull	r2, r3, r3, r2
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	011c      	lsls	r4, r3, #4
 80024fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002502:	2200      	movs	r2, #0
 8002504:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002508:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800250c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002510:	4642      	mov	r2, r8
 8002512:	464b      	mov	r3, r9
 8002514:	1891      	adds	r1, r2, r2
 8002516:	61b9      	str	r1, [r7, #24]
 8002518:	415b      	adcs	r3, r3
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002520:	4641      	mov	r1, r8
 8002522:	1851      	adds	r1, r2, r1
 8002524:	6139      	str	r1, [r7, #16]
 8002526:	4649      	mov	r1, r9
 8002528:	414b      	adcs	r3, r1
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002538:	4659      	mov	r1, fp
 800253a:	00cb      	lsls	r3, r1, #3
 800253c:	4651      	mov	r1, sl
 800253e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002542:	4651      	mov	r1, sl
 8002544:	00ca      	lsls	r2, r1, #3
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	4603      	mov	r3, r0
 800254c:	4642      	mov	r2, r8
 800254e:	189b      	adds	r3, r3, r2
 8002550:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002554:	464b      	mov	r3, r9
 8002556:	460a      	mov	r2, r1
 8002558:	eb42 0303 	adc.w	r3, r2, r3
 800255c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	67bb      	str	r3, [r7, #120]	@ 0x78
 800256a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002578:	4649      	mov	r1, r9
 800257a:	008b      	lsls	r3, r1, #2
 800257c:	4641      	mov	r1, r8
 800257e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002582:	4641      	mov	r1, r8
 8002584:	008a      	lsls	r2, r1, #2
 8002586:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800258a:	f7fd fe29 	bl	80001e0 <__aeabi_uldivmod>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4611      	mov	r1, r2
 8002594:	4b38      	ldr	r3, [pc, #224]	@ (8002678 <UART_SetConfig+0x4e4>)
 8002596:	fba3 2301 	umull	r2, r3, r3, r1
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	2264      	movs	r2, #100	@ 0x64
 800259e:	fb02 f303 	mul.w	r3, r2, r3
 80025a2:	1acb      	subs	r3, r1, r3
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	3332      	adds	r3, #50	@ 0x32
 80025a8:	4a33      	ldr	r2, [pc, #204]	@ (8002678 <UART_SetConfig+0x4e4>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025b4:	441c      	add	r4, r3
 80025b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025ba:	2200      	movs	r2, #0
 80025bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80025be:	677a      	str	r2, [r7, #116]	@ 0x74
 80025c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80025c4:	4642      	mov	r2, r8
 80025c6:	464b      	mov	r3, r9
 80025c8:	1891      	adds	r1, r2, r2
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	415b      	adcs	r3, r3
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025d4:	4641      	mov	r1, r8
 80025d6:	1851      	adds	r1, r2, r1
 80025d8:	6039      	str	r1, [r7, #0]
 80025da:	4649      	mov	r1, r9
 80025dc:	414b      	adcs	r3, r1
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80025ec:	4659      	mov	r1, fp
 80025ee:	00cb      	lsls	r3, r1, #3
 80025f0:	4651      	mov	r1, sl
 80025f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025f6:	4651      	mov	r1, sl
 80025f8:	00ca      	lsls	r2, r1, #3
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	4603      	mov	r3, r0
 8002600:	4642      	mov	r2, r8
 8002602:	189b      	adds	r3, r3, r2
 8002604:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002606:	464b      	mov	r3, r9
 8002608:	460a      	mov	r2, r1
 800260a:	eb42 0303 	adc.w	r3, r2, r3
 800260e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	663b      	str	r3, [r7, #96]	@ 0x60
 800261a:	667a      	str	r2, [r7, #100]	@ 0x64
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002628:	4649      	mov	r1, r9
 800262a:	008b      	lsls	r3, r1, #2
 800262c:	4641      	mov	r1, r8
 800262e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002632:	4641      	mov	r1, r8
 8002634:	008a      	lsls	r2, r1, #2
 8002636:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800263a:	f7fd fdd1 	bl	80001e0 <__aeabi_uldivmod>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4b0d      	ldr	r3, [pc, #52]	@ (8002678 <UART_SetConfig+0x4e4>)
 8002644:	fba3 1302 	umull	r1, r3, r3, r2
 8002648:	095b      	lsrs	r3, r3, #5
 800264a:	2164      	movs	r1, #100	@ 0x64
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	3332      	adds	r3, #50	@ 0x32
 8002656:	4a08      	ldr	r2, [pc, #32]	@ (8002678 <UART_SetConfig+0x4e4>)
 8002658:	fba2 2303 	umull	r2, r3, r2, r3
 800265c:	095b      	lsrs	r3, r3, #5
 800265e:	f003 020f 	and.w	r2, r3, #15
 8002662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4422      	add	r2, r4
 800266a:	609a      	str	r2, [r3, #8]
}
 800266c:	bf00      	nop
 800266e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002672:	46bd      	mov	sp, r7
 8002674:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002678:	51eb851f 	.word	0x51eb851f

0800267c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800268a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800268e:	2b84      	cmp	r3, #132	@ 0x84
 8002690:	d005      	beq.n	800269e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002692:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4413      	add	r3, r2
 800269a:	3303      	adds	r3, #3
 800269c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800269e:	68fb      	ldr	r3, [r7, #12]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80026b0:	f000 fafc 	bl	8002cac <vTaskStartScheduler>
  
  return osOK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	bd80      	pop	{r7, pc}

080026ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80026ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026bc:	b089      	sub	sp, #36	@ 0x24
 80026be:	af04      	add	r7, sp, #16
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d020      	beq.n	800270e <osThreadCreate+0x54>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01c      	beq.n	800270e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685c      	ldr	r4, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691e      	ldr	r6, [r3, #16]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff ffc8 	bl	800267c <makeFreeRtosPriority>
 80026ec:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026f6:	9202      	str	r2, [sp, #8]
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	9100      	str	r1, [sp, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	4632      	mov	r2, r6
 8002700:	4629      	mov	r1, r5
 8002702:	4620      	mov	r0, r4
 8002704:	f000 f8ed 	bl	80028e2 <xTaskCreateStatic>
 8002708:	4603      	mov	r3, r0
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	e01c      	b.n	8002748 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685c      	ldr	r4, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800271a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff ffaa 	bl	800267c <makeFreeRtosPriority>
 8002728:	4602      	mov	r2, r0
 800272a:	f107 030c 	add.w	r3, r7, #12
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	9200      	str	r2, [sp, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	4632      	mov	r2, r6
 8002736:	4629      	mov	r1, r5
 8002738:	4620      	mov	r0, r4
 800273a:	f000 f932 	bl	80029a2 <xTaskCreate>
 800273e:	4603      	mov	r3, r0
 8002740:	2b01      	cmp	r3, #1
 8002742:	d001      	beq.n	8002748 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002744:	2300      	movs	r3, #0
 8002746:	e000      	b.n	800274a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002748:	68fb      	ldr	r3, [r7, #12]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002752 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <osDelay+0x16>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	e000      	b.n	800276a <osDelay+0x18>
 8002768:	2301      	movs	r3, #1
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fa68 	bl	8002c40 <vTaskDelay>
  
  return osOK;
 8002770:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f103 0208 	add.w	r2, r3, #8
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002792:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f103 0208 	add.w	r2, r3, #8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f103 0208 	add.w	r2, r3, #8
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	601a      	str	r2, [r3, #0]
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002832:	d103      	bne.n	800283c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	e00c      	b.n	8002856 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3308      	adds	r3, #8
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	e002      	b.n	800284a <vListInsert+0x2e>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	429a      	cmp	r2, r3
 8002854:	d2f6      	bcs.n	8002844 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	601a      	str	r2, [r3, #0]
}
 8002882:	bf00      	nop
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800288e:	b480      	push	{r7}
 8002890:	b085      	sub	sp, #20
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6892      	ldr	r2, [r2, #8]
 80028a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6852      	ldr	r2, [r2, #4]
 80028ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d103      	bne.n	80028c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	1e5a      	subs	r2, r3, #1
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b08e      	sub	sp, #56	@ 0x38
 80028e6:	af04      	add	r7, sp, #16
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80028f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10b      	bne.n	800290e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	e7fd      	b.n	800290a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800290e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10b      	bne.n	800292c <xTaskCreateStatic+0x4a>
	__asm volatile
 8002914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	61fb      	str	r3, [r7, #28]
}
 8002926:	bf00      	nop
 8002928:	bf00      	nop
 800292a:	e7fd      	b.n	8002928 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800292c:	23a0      	movs	r3, #160	@ 0xa0
 800292e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	2ba0      	cmp	r3, #160	@ 0xa0
 8002934:	d00b      	beq.n	800294e <xTaskCreateStatic+0x6c>
	__asm volatile
 8002936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800293a:	f383 8811 	msr	BASEPRI, r3
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	61bb      	str	r3, [r7, #24]
}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	e7fd      	b.n	800294a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800294e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002952:	2b00      	cmp	r3, #0
 8002954:	d01e      	beq.n	8002994 <xTaskCreateStatic+0xb2>
 8002956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002958:	2b00      	cmp	r3, #0
 800295a:	d01b      	beq.n	8002994 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800295c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002962:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002964:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	2202      	movs	r2, #2
 800296a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800296e:	2300      	movs	r3, #0
 8002970:	9303      	str	r3, [sp, #12]
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	9302      	str	r3, [sp, #8]
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	9301      	str	r3, [sp, #4]
 800297c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f850 	bl	8002a2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800298c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800298e:	f000 f8ed 	bl	8002b6c <prvAddNewTaskToReadyList>
 8002992:	e001      	b.n	8002998 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002998:	697b      	ldr	r3, [r7, #20]
	}
 800299a:	4618      	mov	r0, r3
 800299c:	3728      	adds	r7, #40	@ 0x28
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b08c      	sub	sp, #48	@ 0x30
 80029a6:	af04      	add	r7, sp, #16
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	603b      	str	r3, [r7, #0]
 80029ae:	4613      	mov	r3, r2
 80029b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fefe 	bl	80037b8 <pvPortMalloc>
 80029bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00e      	beq.n	80029e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029c4:	20a0      	movs	r0, #160	@ 0xa0
 80029c6:	f000 fef7 	bl	80037b8 <pvPortMalloc>
 80029ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80029d8:	e005      	b.n	80029e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80029da:	6978      	ldr	r0, [r7, #20]
 80029dc:	f000 ffba 	bl	8003954 <vPortFree>
 80029e0:	e001      	b.n	80029e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d017      	beq.n	8002a1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029f4:	88fa      	ldrh	r2, [r7, #6]
 80029f6:	2300      	movs	r3, #0
 80029f8:	9303      	str	r3, [sp, #12]
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	9302      	str	r3, [sp, #8]
 80029fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a00:	9301      	str	r3, [sp, #4]
 8002a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68b9      	ldr	r1, [r7, #8]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f80e 	bl	8002a2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a10:	69f8      	ldr	r0, [r7, #28]
 8002a12:	f000 f8ab 	bl	8002b6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	e002      	b.n	8002a22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a22:	69bb      	ldr	r3, [r7, #24]
	}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a44:	3b01      	subs	r3, #1
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	f023 0307 	bic.w	r3, r3, #7
 8002a52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00b      	beq.n	8002a76 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	617b      	str	r3, [r7, #20]
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	e7fd      	b.n	8002a72 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01f      	beq.n	8002abc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61fb      	str	r3, [r7, #28]
 8002a80:	e012      	b.n	8002aa8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	4413      	add	r3, r2
 8002a88:	7819      	ldrb	r1, [r3, #0]
 8002a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	4413      	add	r3, r2
 8002a90:	3334      	adds	r3, #52	@ 0x34
 8002a92:	460a      	mov	r2, r1
 8002a94:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	61fb      	str	r3, [r7, #28]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	2b0f      	cmp	r3, #15
 8002aac:	d9e9      	bls.n	8002a82 <prvInitialiseNewTask+0x56>
 8002aae:	e000      	b.n	8002ab2 <prvInitialiseNewTask+0x86>
			{
				break;
 8002ab0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002aba:	e003      	b.n	8002ac4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac6:	2b06      	cmp	r3, #6
 8002ac8:	d901      	bls.n	8002ace <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002aca:	2306      	movs	r3, #6
 8002acc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ad8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002adc:	2200      	movs	r2, #0
 8002ade:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fe68 	bl	80027ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aec:	3318      	adds	r3, #24
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fe63 	bl	80027ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002af8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002afc:	f1c3 0207 	rsb	r2, r3, #7
 8002b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b02:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b08:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1c:	334c      	adds	r3, #76	@ 0x4c
 8002b1e:	224c      	movs	r2, #76	@ 0x4c
 8002b20:	2100      	movs	r1, #0
 8002b22:	4618      	mov	r0, r3
 8002b24:	f001 f836 	bl	8003b94 <memset>
 8002b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2a:	4a0d      	ldr	r2, [pc, #52]	@ (8002b60 <prvInitialiseNewTask+0x134>)
 8002b2c:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b30:	4a0c      	ldr	r2, [pc, #48]	@ (8002b64 <prvInitialiseNewTask+0x138>)
 8002b32:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b36:	4a0c      	ldr	r2, [pc, #48]	@ (8002b68 <prvInitialiseNewTask+0x13c>)
 8002b38:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	68f9      	ldr	r1, [r7, #12]
 8002b3e:	69b8      	ldr	r0, [r7, #24]
 8002b40:	f000 fc2a 	bl	8003398 <pxPortInitialiseStack>
 8002b44:	4602      	mov	r2, r0
 8002b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b48:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b56:	bf00      	nop
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20004108 	.word	0x20004108
 8002b64:	20004170 	.word	0x20004170
 8002b68:	200041d8 	.word	0x200041d8

08002b6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b74:	f000 fd40 	bl	80035f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b78:	4b2a      	ldr	r3, [pc, #168]	@ (8002c24 <prvAddNewTaskToReadyList+0xb8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	4a29      	ldr	r2, [pc, #164]	@ (8002c24 <prvAddNewTaskToReadyList+0xb8>)
 8002b80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b82:	4b29      	ldr	r3, [pc, #164]	@ (8002c28 <prvAddNewTaskToReadyList+0xbc>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b8a:	4a27      	ldr	r2, [pc, #156]	@ (8002c28 <prvAddNewTaskToReadyList+0xbc>)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b90:	4b24      	ldr	r3, [pc, #144]	@ (8002c24 <prvAddNewTaskToReadyList+0xb8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d110      	bne.n	8002bba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b98:	f000 fad4 	bl	8003144 <prvInitialiseTaskLists>
 8002b9c:	e00d      	b.n	8002bba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b9e:	4b23      	ldr	r3, [pc, #140]	@ (8002c2c <prvAddNewTaskToReadyList+0xc0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d109      	bne.n	8002bba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ba6:	4b20      	ldr	r3, [pc, #128]	@ (8002c28 <prvAddNewTaskToReadyList+0xbc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d802      	bhi.n	8002bba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8002c28 <prvAddNewTaskToReadyList+0xbc>)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002bba:	4b1d      	ldr	r3, [pc, #116]	@ (8002c30 <prvAddNewTaskToReadyList+0xc4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c30 <prvAddNewTaskToReadyList+0xc4>)
 8002bc2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc8:	2201      	movs	r2, #1
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	4b19      	ldr	r3, [pc, #100]	@ (8002c34 <prvAddNewTaskToReadyList+0xc8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	4a18      	ldr	r2, [pc, #96]	@ (8002c34 <prvAddNewTaskToReadyList+0xc8>)
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4a15      	ldr	r2, [pc, #84]	@ (8002c38 <prvAddNewTaskToReadyList+0xcc>)
 8002be4:	441a      	add	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3304      	adds	r3, #4
 8002bea:	4619      	mov	r1, r3
 8002bec:	4610      	mov	r0, r2
 8002bee:	f7ff fdf1 	bl	80027d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002bf2:	f000 fd33 	bl	800365c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c2c <prvAddNewTaskToReadyList+0xc0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00e      	beq.n	8002c1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002c28 <prvAddNewTaskToReadyList+0xbc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d207      	bcs.n	8002c1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c3c <prvAddNewTaskToReadyList+0xd0>)
 8002c0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	200004b4 	.word	0x200004b4
 8002c28:	200003b4 	.word	0x200003b4
 8002c2c:	200004c0 	.word	0x200004c0
 8002c30:	200004d0 	.word	0x200004d0
 8002c34:	200004bc 	.word	0x200004bc
 8002c38:	200003b8 	.word	0x200003b8
 8002c3c:	e000ed04 	.word	0xe000ed04

08002c40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d018      	beq.n	8002c84 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c52:	4b14      	ldr	r3, [pc, #80]	@ (8002ca4 <vTaskDelay+0x64>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00b      	beq.n	8002c72 <vTaskDelay+0x32>
	__asm volatile
 8002c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c5e:	f383 8811 	msr	BASEPRI, r3
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	f3bf 8f4f 	dsb	sy
 8002c6a:	60bb      	str	r3, [r7, #8]
}
 8002c6c:	bf00      	nop
 8002c6e:	bf00      	nop
 8002c70:	e7fd      	b.n	8002c6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c72:	f000 f885 	bl	8002d80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c76:	2100      	movs	r1, #0
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fb27 	bl	80032cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c7e:	f000 f88d 	bl	8002d9c <xTaskResumeAll>
 8002c82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d107      	bne.n	8002c9a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002c8a:	4b07      	ldr	r3, [pc, #28]	@ (8002ca8 <vTaskDelay+0x68>)
 8002c8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	200004dc 	.word	0x200004dc
 8002ca8:	e000ed04 	.word	0xe000ed04

08002cac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	@ 0x28
 8002cb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002cba:	463a      	mov	r2, r7
 8002cbc:	1d39      	adds	r1, r7, #4
 8002cbe:	f107 0308 	add.w	r3, r7, #8
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fc22 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002cc8:	6839      	ldr	r1, [r7, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	9202      	str	r2, [sp, #8]
 8002cd0:	9301      	str	r3, [sp, #4]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	460a      	mov	r2, r1
 8002cda:	4921      	ldr	r1, [pc, #132]	@ (8002d60 <vTaskStartScheduler+0xb4>)
 8002cdc:	4821      	ldr	r0, [pc, #132]	@ (8002d64 <vTaskStartScheduler+0xb8>)
 8002cde:	f7ff fe00 	bl	80028e2 <xTaskCreateStatic>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4a20      	ldr	r2, [pc, #128]	@ (8002d68 <vTaskStartScheduler+0xbc>)
 8002ce6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d68 <vTaskStartScheduler+0xbc>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	e001      	b.n	8002cfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d11b      	bne.n	8002d38 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d04:	f383 8811 	msr	BASEPRI, r3
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	613b      	str	r3, [r7, #16]
}
 8002d12:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002d14:	4b15      	ldr	r3, [pc, #84]	@ (8002d6c <vTaskStartScheduler+0xc0>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	334c      	adds	r3, #76	@ 0x4c
 8002d1a:	4a15      	ldr	r2, [pc, #84]	@ (8002d70 <vTaskStartScheduler+0xc4>)
 8002d1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d1e:	4b15      	ldr	r3, [pc, #84]	@ (8002d74 <vTaskStartScheduler+0xc8>)
 8002d20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d26:	4b14      	ldr	r3, [pc, #80]	@ (8002d78 <vTaskStartScheduler+0xcc>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d2c:	4b13      	ldr	r3, [pc, #76]	@ (8002d7c <vTaskStartScheduler+0xd0>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d32:	f000 fbbd 	bl	80034b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d36:	e00f      	b.n	8002d58 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d3e:	d10b      	bne.n	8002d58 <vTaskStartScheduler+0xac>
	__asm volatile
 8002d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d44:	f383 8811 	msr	BASEPRI, r3
 8002d48:	f3bf 8f6f 	isb	sy
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	60fb      	str	r3, [r7, #12]
}
 8002d52:	bf00      	nop
 8002d54:	bf00      	nop
 8002d56:	e7fd      	b.n	8002d54 <vTaskStartScheduler+0xa8>
}
 8002d58:	bf00      	nop
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	08003db0 	.word	0x08003db0
 8002d64:	08003115 	.word	0x08003115
 8002d68:	200004d8 	.word	0x200004d8
 8002d6c:	200003b4 	.word	0x200003b4
 8002d70:	20000010 	.word	0x20000010
 8002d74:	200004d4 	.word	0x200004d4
 8002d78:	200004c0 	.word	0x200004c0
 8002d7c:	200004b8 	.word	0x200004b8

08002d80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002d84:	4b04      	ldr	r3, [pc, #16]	@ (8002d98 <vTaskSuspendAll+0x18>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	4a03      	ldr	r2, [pc, #12]	@ (8002d98 <vTaskSuspendAll+0x18>)
 8002d8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002d8e:	bf00      	nop
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	200004dc 	.word	0x200004dc

08002d9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002daa:	4b42      	ldr	r3, [pc, #264]	@ (8002eb4 <xTaskResumeAll+0x118>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10b      	bne.n	8002dca <xTaskResumeAll+0x2e>
	__asm volatile
 8002db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db6:	f383 8811 	msr	BASEPRI, r3
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	603b      	str	r3, [r7, #0]
}
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop
 8002dc8:	e7fd      	b.n	8002dc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002dca:	f000 fc15 	bl	80035f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002dce:	4b39      	ldr	r3, [pc, #228]	@ (8002eb4 <xTaskResumeAll+0x118>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	4a37      	ldr	r2, [pc, #220]	@ (8002eb4 <xTaskResumeAll+0x118>)
 8002dd6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dd8:	4b36      	ldr	r3, [pc, #216]	@ (8002eb4 <xTaskResumeAll+0x118>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d161      	bne.n	8002ea4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002de0:	4b35      	ldr	r3, [pc, #212]	@ (8002eb8 <xTaskResumeAll+0x11c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d05d      	beq.n	8002ea4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002de8:	e02e      	b.n	8002e48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dea:	4b34      	ldr	r3, [pc, #208]	@ (8002ebc <xTaskResumeAll+0x120>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	3318      	adds	r3, #24
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fd49 	bl	800288e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fd44 	bl	800288e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ec0 <xTaskResumeAll+0x124>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	4a2a      	ldr	r2, [pc, #168]	@ (8002ec0 <xTaskResumeAll+0x124>)
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4a27      	ldr	r2, [pc, #156]	@ (8002ec4 <xTaskResumeAll+0x128>)
 8002e26:	441a      	add	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	f7ff fcd0 	bl	80027d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e38:	4b23      	ldr	r3, [pc, #140]	@ (8002ec8 <xTaskResumeAll+0x12c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d302      	bcc.n	8002e48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002e42:	4b22      	ldr	r3, [pc, #136]	@ (8002ecc <xTaskResumeAll+0x130>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e48:	4b1c      	ldr	r3, [pc, #112]	@ (8002ebc <xTaskResumeAll+0x120>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1cc      	bne.n	8002dea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e56:	f000 fa19 	bl	800328c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed0 <xTaskResumeAll+0x134>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d010      	beq.n	8002e88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e66:	f000 f837 	bl	8002ed8 <xTaskIncrementTick>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002e70:	4b16      	ldr	r3, [pc, #88]	@ (8002ecc <xTaskResumeAll+0x130>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f1      	bne.n	8002e66 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002e82:	4b13      	ldr	r3, [pc, #76]	@ (8002ed0 <xTaskResumeAll+0x134>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e88:	4b10      	ldr	r3, [pc, #64]	@ (8002ecc <xTaskResumeAll+0x130>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d009      	beq.n	8002ea4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e90:	2301      	movs	r3, #1
 8002e92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e94:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed4 <xTaskResumeAll+0x138>)
 8002e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ea4:	f000 fbda 	bl	800365c <vPortExitCritical>

	return xAlreadyYielded;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200004dc 	.word	0x200004dc
 8002eb8:	200004b4 	.word	0x200004b4
 8002ebc:	20000474 	.word	0x20000474
 8002ec0:	200004bc 	.word	0x200004bc
 8002ec4:	200003b8 	.word	0x200003b8
 8002ec8:	200003b4 	.word	0x200003b4
 8002ecc:	200004c8 	.word	0x200004c8
 8002ed0:	200004c4 	.word	0x200004c4
 8002ed4:	e000ed04 	.word	0xe000ed04

08002ed8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ee2:	4b4f      	ldr	r3, [pc, #316]	@ (8003020 <xTaskIncrementTick+0x148>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f040 808f 	bne.w	800300a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002eec:	4b4d      	ldr	r3, [pc, #308]	@ (8003024 <xTaskIncrementTick+0x14c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ef4:	4a4b      	ldr	r2, [pc, #300]	@ (8003024 <xTaskIncrementTick+0x14c>)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d121      	bne.n	8002f44 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f00:	4b49      	ldr	r3, [pc, #292]	@ (8003028 <xTaskIncrementTick+0x150>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	603b      	str	r3, [r7, #0]
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	e7fd      	b.n	8002f1e <xTaskIncrementTick+0x46>
 8002f22:	4b41      	ldr	r3, [pc, #260]	@ (8003028 <xTaskIncrementTick+0x150>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	4b40      	ldr	r3, [pc, #256]	@ (800302c <xTaskIncrementTick+0x154>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a3e      	ldr	r2, [pc, #248]	@ (8003028 <xTaskIncrementTick+0x150>)
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	4a3e      	ldr	r2, [pc, #248]	@ (800302c <xTaskIncrementTick+0x154>)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	4b3e      	ldr	r3, [pc, #248]	@ (8003030 <xTaskIncrementTick+0x158>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	4a3c      	ldr	r2, [pc, #240]	@ (8003030 <xTaskIncrementTick+0x158>)
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	f000 f9a4 	bl	800328c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f44:	4b3b      	ldr	r3, [pc, #236]	@ (8003034 <xTaskIncrementTick+0x15c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d348      	bcc.n	8002fe0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f4e:	4b36      	ldr	r3, [pc, #216]	@ (8003028 <xTaskIncrementTick+0x150>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d104      	bne.n	8002f62 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f58:	4b36      	ldr	r3, [pc, #216]	@ (8003034 <xTaskIncrementTick+0x15c>)
 8002f5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f5e:	601a      	str	r2, [r3, #0]
					break;
 8002f60:	e03e      	b.n	8002fe0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f62:	4b31      	ldr	r3, [pc, #196]	@ (8003028 <xTaskIncrementTick+0x150>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d203      	bcs.n	8002f82 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f7a:	4a2e      	ldr	r2, [pc, #184]	@ (8003034 <xTaskIncrementTick+0x15c>)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f80:	e02e      	b.n	8002fe0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	3304      	adds	r3, #4
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fc81 	bl	800288e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d004      	beq.n	8002f9e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	3318      	adds	r3, #24
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fc78 	bl	800288e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	409a      	lsls	r2, r3
 8002fa6:	4b24      	ldr	r3, [pc, #144]	@ (8003038 <xTaskIncrementTick+0x160>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	4a22      	ldr	r2, [pc, #136]	@ (8003038 <xTaskIncrementTick+0x160>)
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4a1f      	ldr	r2, [pc, #124]	@ (800303c <xTaskIncrementTick+0x164>)
 8002fbe:	441a      	add	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	f7ff fc04 	bl	80027d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003040 <xTaskIncrementTick+0x168>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d3b9      	bcc.n	8002f4e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fde:	e7b6      	b.n	8002f4e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002fe0:	4b17      	ldr	r3, [pc, #92]	@ (8003040 <xTaskIncrementTick+0x168>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fe6:	4915      	ldr	r1, [pc, #84]	@ (800303c <xTaskIncrementTick+0x164>)
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d901      	bls.n	8002ffc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002ffc:	4b11      	ldr	r3, [pc, #68]	@ (8003044 <xTaskIncrementTick+0x16c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d007      	beq.n	8003014 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003004:	2301      	movs	r3, #1
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	e004      	b.n	8003014 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800300a:	4b0f      	ldr	r3, [pc, #60]	@ (8003048 <xTaskIncrementTick+0x170>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	3301      	adds	r3, #1
 8003010:	4a0d      	ldr	r2, [pc, #52]	@ (8003048 <xTaskIncrementTick+0x170>)
 8003012:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003014:	697b      	ldr	r3, [r7, #20]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	200004dc 	.word	0x200004dc
 8003024:	200004b8 	.word	0x200004b8
 8003028:	2000046c 	.word	0x2000046c
 800302c:	20000470 	.word	0x20000470
 8003030:	200004cc 	.word	0x200004cc
 8003034:	200004d4 	.word	0x200004d4
 8003038:	200004bc 	.word	0x200004bc
 800303c:	200003b8 	.word	0x200003b8
 8003040:	200003b4 	.word	0x200003b4
 8003044:	200004c8 	.word	0x200004c8
 8003048:	200004c4 	.word	0x200004c4

0800304c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003052:	4b2a      	ldr	r3, [pc, #168]	@ (80030fc <vTaskSwitchContext+0xb0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800305a:	4b29      	ldr	r3, [pc, #164]	@ (8003100 <vTaskSwitchContext+0xb4>)
 800305c:	2201      	movs	r2, #1
 800305e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003060:	e045      	b.n	80030ee <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003062:	4b27      	ldr	r3, [pc, #156]	@ (8003100 <vTaskSwitchContext+0xb4>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003068:	4b26      	ldr	r3, [pc, #152]	@ (8003104 <vTaskSwitchContext+0xb8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003076:	7afb      	ldrb	r3, [r7, #11]
 8003078:	f1c3 031f 	rsb	r3, r3, #31
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	4922      	ldr	r1, [pc, #136]	@ (8003108 <vTaskSwitchContext+0xbc>)
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10b      	bne.n	80030aa <vTaskSwitchContext+0x5e>
	__asm volatile
 8003092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	607b      	str	r3, [r7, #4]
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	e7fd      	b.n	80030a6 <vTaskSwitchContext+0x5a>
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4a14      	ldr	r2, [pc, #80]	@ (8003108 <vTaskSwitchContext+0xbc>)
 80030b6:	4413      	add	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	605a      	str	r2, [r3, #4]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	3308      	adds	r3, #8
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d104      	bne.n	80030da <vTaskSwitchContext+0x8e>
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4a0a      	ldr	r2, [pc, #40]	@ (800310c <vTaskSwitchContext+0xc0>)
 80030e2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80030e4:	4b09      	ldr	r3, [pc, #36]	@ (800310c <vTaskSwitchContext+0xc0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	334c      	adds	r3, #76	@ 0x4c
 80030ea:	4a09      	ldr	r2, [pc, #36]	@ (8003110 <vTaskSwitchContext+0xc4>)
 80030ec:	6013      	str	r3, [r2, #0]
}
 80030ee:	bf00      	nop
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	200004dc 	.word	0x200004dc
 8003100:	200004c8 	.word	0x200004c8
 8003104:	200004bc 	.word	0x200004bc
 8003108:	200003b8 	.word	0x200003b8
 800310c:	200003b4 	.word	0x200003b4
 8003110:	20000010 	.word	0x20000010

08003114 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800311c:	f000 f852 	bl	80031c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003120:	4b06      	ldr	r3, [pc, #24]	@ (800313c <prvIdleTask+0x28>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d9f9      	bls.n	800311c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003128:	4b05      	ldr	r3, [pc, #20]	@ (8003140 <prvIdleTask+0x2c>)
 800312a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003138:	e7f0      	b.n	800311c <prvIdleTask+0x8>
 800313a:	bf00      	nop
 800313c:	200003b8 	.word	0x200003b8
 8003140:	e000ed04 	.word	0xe000ed04

08003144 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800314a:	2300      	movs	r3, #0
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	e00c      	b.n	800316a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4a12      	ldr	r2, [pc, #72]	@ (80031a4 <prvInitialiseTaskLists+0x60>)
 800315c:	4413      	add	r3, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff fb0b 	bl	800277a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3301      	adds	r3, #1
 8003168:	607b      	str	r3, [r7, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b06      	cmp	r3, #6
 800316e:	d9ef      	bls.n	8003150 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003170:	480d      	ldr	r0, [pc, #52]	@ (80031a8 <prvInitialiseTaskLists+0x64>)
 8003172:	f7ff fb02 	bl	800277a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003176:	480d      	ldr	r0, [pc, #52]	@ (80031ac <prvInitialiseTaskLists+0x68>)
 8003178:	f7ff faff 	bl	800277a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800317c:	480c      	ldr	r0, [pc, #48]	@ (80031b0 <prvInitialiseTaskLists+0x6c>)
 800317e:	f7ff fafc 	bl	800277a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003182:	480c      	ldr	r0, [pc, #48]	@ (80031b4 <prvInitialiseTaskLists+0x70>)
 8003184:	f7ff faf9 	bl	800277a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003188:	480b      	ldr	r0, [pc, #44]	@ (80031b8 <prvInitialiseTaskLists+0x74>)
 800318a:	f7ff faf6 	bl	800277a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800318e:	4b0b      	ldr	r3, [pc, #44]	@ (80031bc <prvInitialiseTaskLists+0x78>)
 8003190:	4a05      	ldr	r2, [pc, #20]	@ (80031a8 <prvInitialiseTaskLists+0x64>)
 8003192:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003194:	4b0a      	ldr	r3, [pc, #40]	@ (80031c0 <prvInitialiseTaskLists+0x7c>)
 8003196:	4a05      	ldr	r2, [pc, #20]	@ (80031ac <prvInitialiseTaskLists+0x68>)
 8003198:	601a      	str	r2, [r3, #0]
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	200003b8 	.word	0x200003b8
 80031a8:	20000444 	.word	0x20000444
 80031ac:	20000458 	.word	0x20000458
 80031b0:	20000474 	.word	0x20000474
 80031b4:	20000488 	.word	0x20000488
 80031b8:	200004a0 	.word	0x200004a0
 80031bc:	2000046c 	.word	0x2000046c
 80031c0:	20000470 	.word	0x20000470

080031c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031ca:	e019      	b.n	8003200 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80031cc:	f000 fa14 	bl	80035f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031d0:	4b10      	ldr	r3, [pc, #64]	@ (8003214 <prvCheckTasksWaitingTermination+0x50>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3304      	adds	r3, #4
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fb56 	bl	800288e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80031e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003218 <prvCheckTasksWaitingTermination+0x54>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003218 <prvCheckTasksWaitingTermination+0x54>)
 80031ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80031ec:	4b0b      	ldr	r3, [pc, #44]	@ (800321c <prvCheckTasksWaitingTermination+0x58>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	4a0a      	ldr	r2, [pc, #40]	@ (800321c <prvCheckTasksWaitingTermination+0x58>)
 80031f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80031f6:	f000 fa31 	bl	800365c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f810 	bl	8003220 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003200:	4b06      	ldr	r3, [pc, #24]	@ (800321c <prvCheckTasksWaitingTermination+0x58>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e1      	bne.n	80031cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003208:	bf00      	nop
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000488 	.word	0x20000488
 8003218:	200004b4 	.word	0x200004b4
 800321c:	2000049c 	.word	0x2000049c

08003220 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	334c      	adds	r3, #76	@ 0x4c
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fcb9 	bl	8003ba4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003238:	2b00      	cmp	r3, #0
 800323a:	d108      	bne.n	800324e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fb87 	bl	8003954 <vPortFree>
				vPortFree( pxTCB );
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fb84 	bl	8003954 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800324c:	e019      	b.n	8003282 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003254:	2b01      	cmp	r3, #1
 8003256:	d103      	bne.n	8003260 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fb7b 	bl	8003954 <vPortFree>
	}
 800325e:	e010      	b.n	8003282 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003266:	2b02      	cmp	r3, #2
 8003268:	d00b      	beq.n	8003282 <prvDeleteTCB+0x62>
	__asm volatile
 800326a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	60fb      	str	r3, [r7, #12]
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	e7fd      	b.n	800327e <prvDeleteTCB+0x5e>
	}
 8003282:	bf00      	nop
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003292:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <prvResetNextTaskUnblockTime+0x38>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d104      	bne.n	80032a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800329c:	4b0a      	ldr	r3, [pc, #40]	@ (80032c8 <prvResetNextTaskUnblockTime+0x3c>)
 800329e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80032a4:	e008      	b.n	80032b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032a6:	4b07      	ldr	r3, [pc, #28]	@ (80032c4 <prvResetNextTaskUnblockTime+0x38>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4a04      	ldr	r2, [pc, #16]	@ (80032c8 <prvResetNextTaskUnblockTime+0x3c>)
 80032b6:	6013      	str	r3, [r2, #0]
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	2000046c 	.word	0x2000046c
 80032c8:	200004d4 	.word	0x200004d4

080032cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80032d6:	4b29      	ldr	r3, [pc, #164]	@ (800337c <prvAddCurrentTaskToDelayedList+0xb0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032dc:	4b28      	ldr	r3, [pc, #160]	@ (8003380 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3304      	adds	r3, #4
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff fad3 	bl	800288e <uxListRemove>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10b      	bne.n	8003306 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80032ee:	4b24      	ldr	r3, [pc, #144]	@ (8003380 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f4:	2201      	movs	r2, #1
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43da      	mvns	r2, r3
 80032fc:	4b21      	ldr	r3, [pc, #132]	@ (8003384 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4013      	ands	r3, r2
 8003302:	4a20      	ldr	r2, [pc, #128]	@ (8003384 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003304:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800330c:	d10a      	bne.n	8003324 <prvAddCurrentTaskToDelayedList+0x58>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d007      	beq.n	8003324 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003314:	4b1a      	ldr	r3, [pc, #104]	@ (8003380 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3304      	adds	r3, #4
 800331a:	4619      	mov	r1, r3
 800331c:	481a      	ldr	r0, [pc, #104]	@ (8003388 <prvAddCurrentTaskToDelayedList+0xbc>)
 800331e:	f7ff fa59 	bl	80027d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003322:	e026      	b.n	8003372 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4413      	add	r3, r2
 800332a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800332c:	4b14      	ldr	r3, [pc, #80]	@ (8003380 <prvAddCurrentTaskToDelayedList+0xb4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	429a      	cmp	r2, r3
 800333a:	d209      	bcs.n	8003350 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800333c:	4b13      	ldr	r3, [pc, #76]	@ (800338c <prvAddCurrentTaskToDelayedList+0xc0>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4b0f      	ldr	r3, [pc, #60]	@ (8003380 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	3304      	adds	r3, #4
 8003346:	4619      	mov	r1, r3
 8003348:	4610      	mov	r0, r2
 800334a:	f7ff fa67 	bl	800281c <vListInsert>
}
 800334e:	e010      	b.n	8003372 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003350:	4b0f      	ldr	r3, [pc, #60]	@ (8003390 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	4b0a      	ldr	r3, [pc, #40]	@ (8003380 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3304      	adds	r3, #4
 800335a:	4619      	mov	r1, r3
 800335c:	4610      	mov	r0, r2
 800335e:	f7ff fa5d 	bl	800281c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003362:	4b0c      	ldr	r3, [pc, #48]	@ (8003394 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	429a      	cmp	r2, r3
 800336a:	d202      	bcs.n	8003372 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800336c:	4a09      	ldr	r2, [pc, #36]	@ (8003394 <prvAddCurrentTaskToDelayedList+0xc8>)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	6013      	str	r3, [r2, #0]
}
 8003372:	bf00      	nop
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	200004b8 	.word	0x200004b8
 8003380:	200003b4 	.word	0x200003b4
 8003384:	200004bc 	.word	0x200004bc
 8003388:	200004a0 	.word	0x200004a0
 800338c:	20000470 	.word	0x20000470
 8003390:	2000046c 	.word	0x2000046c
 8003394:	200004d4 	.word	0x200004d4

08003398 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3b04      	subs	r3, #4
 80033a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	3b04      	subs	r3, #4
 80033b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f023 0201 	bic.w	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	3b04      	subs	r3, #4
 80033c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80033c8:	4a0c      	ldr	r2, [pc, #48]	@ (80033fc <pxPortInitialiseStack+0x64>)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	3b14      	subs	r3, #20
 80033d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	3b04      	subs	r3, #4
 80033de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f06f 0202 	mvn.w	r2, #2
 80033e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3b20      	subs	r3, #32
 80033ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80033ee:	68fb      	ldr	r3, [r7, #12]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	08003401 	.word	0x08003401

08003400 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800340a:	4b13      	ldr	r3, [pc, #76]	@ (8003458 <prvTaskExitError+0x58>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003412:	d00b      	beq.n	800342c <prvTaskExitError+0x2c>
	__asm volatile
 8003414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	60fb      	str	r3, [r7, #12]
}
 8003426:	bf00      	nop
 8003428:	bf00      	nop
 800342a:	e7fd      	b.n	8003428 <prvTaskExitError+0x28>
	__asm volatile
 800342c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	60bb      	str	r3, [r7, #8]
}
 800343e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003440:	bf00      	nop
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0fc      	beq.n	8003442 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003448:	bf00      	nop
 800344a:	bf00      	nop
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	2000000c 	.word	0x2000000c
 800345c:	00000000 	.word	0x00000000

08003460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003460:	4b07      	ldr	r3, [pc, #28]	@ (8003480 <pxCurrentTCBConst2>)
 8003462:	6819      	ldr	r1, [r3, #0]
 8003464:	6808      	ldr	r0, [r1, #0]
 8003466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800346a:	f380 8809 	msr	PSP, r0
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f04f 0000 	mov.w	r0, #0
 8003476:	f380 8811 	msr	BASEPRI, r0
 800347a:	4770      	bx	lr
 800347c:	f3af 8000 	nop.w

08003480 <pxCurrentTCBConst2>:
 8003480:	200003b4 	.word	0x200003b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003484:	bf00      	nop
 8003486:	bf00      	nop

08003488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003488:	4808      	ldr	r0, [pc, #32]	@ (80034ac <prvPortStartFirstTask+0x24>)
 800348a:	6800      	ldr	r0, [r0, #0]
 800348c:	6800      	ldr	r0, [r0, #0]
 800348e:	f380 8808 	msr	MSP, r0
 8003492:	f04f 0000 	mov.w	r0, #0
 8003496:	f380 8814 	msr	CONTROL, r0
 800349a:	b662      	cpsie	i
 800349c:	b661      	cpsie	f
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	df00      	svc	0
 80034a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80034aa:	bf00      	nop
 80034ac:	e000ed08 	.word	0xe000ed08

080034b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80034b6:	4b47      	ldr	r3, [pc, #284]	@ (80035d4 <xPortStartScheduler+0x124>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a47      	ldr	r2, [pc, #284]	@ (80035d8 <xPortStartScheduler+0x128>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d10b      	bne.n	80034d8 <xPortStartScheduler+0x28>
	__asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	60fb      	str	r3, [r7, #12]
}
 80034d2:	bf00      	nop
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80034d8:	4b3e      	ldr	r3, [pc, #248]	@ (80035d4 <xPortStartScheduler+0x124>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a3f      	ldr	r2, [pc, #252]	@ (80035dc <xPortStartScheduler+0x12c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10b      	bne.n	80034fa <xPortStartScheduler+0x4a>
	__asm volatile
 80034e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	613b      	str	r3, [r7, #16]
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop
 80034f8:	e7fd      	b.n	80034f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80034fa:	4b39      	ldr	r3, [pc, #228]	@ (80035e0 <xPortStartScheduler+0x130>)
 80034fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	22ff      	movs	r2, #255	@ 0xff
 800350a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800351c:	b2da      	uxtb	r2, r3
 800351e:	4b31      	ldr	r3, [pc, #196]	@ (80035e4 <xPortStartScheduler+0x134>)
 8003520:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003522:	4b31      	ldr	r3, [pc, #196]	@ (80035e8 <xPortStartScheduler+0x138>)
 8003524:	2207      	movs	r2, #7
 8003526:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003528:	e009      	b.n	800353e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800352a:	4b2f      	ldr	r3, [pc, #188]	@ (80035e8 <xPortStartScheduler+0x138>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	3b01      	subs	r3, #1
 8003530:	4a2d      	ldr	r2, [pc, #180]	@ (80035e8 <xPortStartScheduler+0x138>)
 8003532:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	b2db      	uxtb	r3, r3
 800353c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003546:	2b80      	cmp	r3, #128	@ 0x80
 8003548:	d0ef      	beq.n	800352a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800354a:	4b27      	ldr	r3, [pc, #156]	@ (80035e8 <xPortStartScheduler+0x138>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f1c3 0307 	rsb	r3, r3, #7
 8003552:	2b04      	cmp	r3, #4
 8003554:	d00b      	beq.n	800356e <xPortStartScheduler+0xbe>
	__asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	60bb      	str	r3, [r7, #8]
}
 8003568:	bf00      	nop
 800356a:	bf00      	nop
 800356c:	e7fd      	b.n	800356a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800356e:	4b1e      	ldr	r3, [pc, #120]	@ (80035e8 <xPortStartScheduler+0x138>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	021b      	lsls	r3, r3, #8
 8003574:	4a1c      	ldr	r2, [pc, #112]	@ (80035e8 <xPortStartScheduler+0x138>)
 8003576:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003578:	4b1b      	ldr	r3, [pc, #108]	@ (80035e8 <xPortStartScheduler+0x138>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003580:	4a19      	ldr	r2, [pc, #100]	@ (80035e8 <xPortStartScheduler+0x138>)
 8003582:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	b2da      	uxtb	r2, r3
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800358c:	4b17      	ldr	r3, [pc, #92]	@ (80035ec <xPortStartScheduler+0x13c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a16      	ldr	r2, [pc, #88]	@ (80035ec <xPortStartScheduler+0x13c>)
 8003592:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003596:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003598:	4b14      	ldr	r3, [pc, #80]	@ (80035ec <xPortStartScheduler+0x13c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a13      	ldr	r2, [pc, #76]	@ (80035ec <xPortStartScheduler+0x13c>)
 800359e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80035a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80035a4:	f000 f8da 	bl	800375c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80035a8:	4b11      	ldr	r3, [pc, #68]	@ (80035f0 <xPortStartScheduler+0x140>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80035ae:	f000 f8f9 	bl	80037a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80035b2:	4b10      	ldr	r3, [pc, #64]	@ (80035f4 <xPortStartScheduler+0x144>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a0f      	ldr	r2, [pc, #60]	@ (80035f4 <xPortStartScheduler+0x144>)
 80035b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80035bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80035be:	f7ff ff63 	bl	8003488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80035c2:	f7ff fd43 	bl	800304c <vTaskSwitchContext>
	prvTaskExitError();
 80035c6:	f7ff ff1b 	bl	8003400 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	e000ed00 	.word	0xe000ed00
 80035d8:	410fc271 	.word	0x410fc271
 80035dc:	410fc270 	.word	0x410fc270
 80035e0:	e000e400 	.word	0xe000e400
 80035e4:	200004e0 	.word	0x200004e0
 80035e8:	200004e4 	.word	0x200004e4
 80035ec:	e000ed20 	.word	0xe000ed20
 80035f0:	2000000c 	.word	0x2000000c
 80035f4:	e000ef34 	.word	0xe000ef34

080035f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
	__asm volatile
 80035fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003602:	f383 8811 	msr	BASEPRI, r3
 8003606:	f3bf 8f6f 	isb	sy
 800360a:	f3bf 8f4f 	dsb	sy
 800360e:	607b      	str	r3, [r7, #4]
}
 8003610:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003612:	4b10      	ldr	r3, [pc, #64]	@ (8003654 <vPortEnterCritical+0x5c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3301      	adds	r3, #1
 8003618:	4a0e      	ldr	r2, [pc, #56]	@ (8003654 <vPortEnterCritical+0x5c>)
 800361a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800361c:	4b0d      	ldr	r3, [pc, #52]	@ (8003654 <vPortEnterCritical+0x5c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d110      	bne.n	8003646 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003624:	4b0c      	ldr	r3, [pc, #48]	@ (8003658 <vPortEnterCritical+0x60>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <vPortEnterCritical+0x4e>
	__asm volatile
 800362e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	603b      	str	r3, [r7, #0]
}
 8003640:	bf00      	nop
 8003642:	bf00      	nop
 8003644:	e7fd      	b.n	8003642 <vPortEnterCritical+0x4a>
	}
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	2000000c 	.word	0x2000000c
 8003658:	e000ed04 	.word	0xe000ed04

0800365c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003662:	4b12      	ldr	r3, [pc, #72]	@ (80036ac <vPortExitCritical+0x50>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10b      	bne.n	8003682 <vPortExitCritical+0x26>
	__asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	607b      	str	r3, [r7, #4]
}
 800367c:	bf00      	nop
 800367e:	bf00      	nop
 8003680:	e7fd      	b.n	800367e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003682:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <vPortExitCritical+0x50>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3b01      	subs	r3, #1
 8003688:	4a08      	ldr	r2, [pc, #32]	@ (80036ac <vPortExitCritical+0x50>)
 800368a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800368c:	4b07      	ldr	r3, [pc, #28]	@ (80036ac <vPortExitCritical+0x50>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d105      	bne.n	80036a0 <vPortExitCritical+0x44>
 8003694:	2300      	movs	r3, #0
 8003696:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800369e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	2000000c 	.word	0x2000000c

080036b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80036b0:	f3ef 8009 	mrs	r0, PSP
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	4b15      	ldr	r3, [pc, #84]	@ (8003710 <pxCurrentTCBConst>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	f01e 0f10 	tst.w	lr, #16
 80036c0:	bf08      	it	eq
 80036c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80036c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ca:	6010      	str	r0, [r2, #0]
 80036cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80036d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80036d4:	f380 8811 	msr	BASEPRI, r0
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f7ff fcb4 	bl	800304c <vTaskSwitchContext>
 80036e4:	f04f 0000 	mov.w	r0, #0
 80036e8:	f380 8811 	msr	BASEPRI, r0
 80036ec:	bc09      	pop	{r0, r3}
 80036ee:	6819      	ldr	r1, [r3, #0]
 80036f0:	6808      	ldr	r0, [r1, #0]
 80036f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f6:	f01e 0f10 	tst.w	lr, #16
 80036fa:	bf08      	it	eq
 80036fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003700:	f380 8809 	msr	PSP, r0
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	f3af 8000 	nop.w

08003710 <pxCurrentTCBConst>:
 8003710:	200003b4 	.word	0x200003b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003714:	bf00      	nop
 8003716:	bf00      	nop

08003718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
	__asm volatile
 800371e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003722:	f383 8811 	msr	BASEPRI, r3
 8003726:	f3bf 8f6f 	isb	sy
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	607b      	str	r3, [r7, #4]
}
 8003730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003732:	f7ff fbd1 	bl	8002ed8 <xTaskIncrementTick>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800373c:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <SysTick_Handler+0x40>)
 800373e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	2300      	movs	r3, #0
 8003746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	f383 8811 	msr	BASEPRI, r3
}
 800374e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	e000ed04 	.word	0xe000ed04

0800375c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003760:	4b0b      	ldr	r3, [pc, #44]	@ (8003790 <vPortSetupTimerInterrupt+0x34>)
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003766:	4b0b      	ldr	r3, [pc, #44]	@ (8003794 <vPortSetupTimerInterrupt+0x38>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800376c:	4b0a      	ldr	r3, [pc, #40]	@ (8003798 <vPortSetupTimerInterrupt+0x3c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a0a      	ldr	r2, [pc, #40]	@ (800379c <vPortSetupTimerInterrupt+0x40>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	099b      	lsrs	r3, r3, #6
 8003778:	4a09      	ldr	r2, [pc, #36]	@ (80037a0 <vPortSetupTimerInterrupt+0x44>)
 800377a:	3b01      	subs	r3, #1
 800377c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800377e:	4b04      	ldr	r3, [pc, #16]	@ (8003790 <vPortSetupTimerInterrupt+0x34>)
 8003780:	2207      	movs	r2, #7
 8003782:	601a      	str	r2, [r3, #0]
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	e000e010 	.word	0xe000e010
 8003794:	e000e018 	.word	0xe000e018
 8003798:	20000000 	.word	0x20000000
 800379c:	10624dd3 	.word	0x10624dd3
 80037a0:	e000e014 	.word	0xe000e014

080037a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80037a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80037b4 <vPortEnableVFP+0x10>
 80037a8:	6801      	ldr	r1, [r0, #0]
 80037aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80037ae:	6001      	str	r1, [r0, #0]
 80037b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80037b2:	bf00      	nop
 80037b4:	e000ed88 	.word	0xe000ed88

080037b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08a      	sub	sp, #40	@ 0x28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80037c4:	f7ff fadc 	bl	8002d80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80037c8:	4b5c      	ldr	r3, [pc, #368]	@ (800393c <pvPortMalloc+0x184>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80037d0:	f000 f924 	bl	8003a1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80037d4:	4b5a      	ldr	r3, [pc, #360]	@ (8003940 <pvPortMalloc+0x188>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4013      	ands	r3, r2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f040 8095 	bne.w	800390c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01e      	beq.n	8003826 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80037e8:	2208      	movs	r2, #8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d015      	beq.n	8003826 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f023 0307 	bic.w	r3, r3, #7
 8003800:	3308      	adds	r3, #8
 8003802:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00b      	beq.n	8003826 <pvPortMalloc+0x6e>
	__asm volatile
 800380e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	617b      	str	r3, [r7, #20]
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	e7fd      	b.n	8003822 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d06f      	beq.n	800390c <pvPortMalloc+0x154>
 800382c:	4b45      	ldr	r3, [pc, #276]	@ (8003944 <pvPortMalloc+0x18c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	429a      	cmp	r2, r3
 8003834:	d86a      	bhi.n	800390c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003836:	4b44      	ldr	r3, [pc, #272]	@ (8003948 <pvPortMalloc+0x190>)
 8003838:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800383a:	4b43      	ldr	r3, [pc, #268]	@ (8003948 <pvPortMalloc+0x190>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003840:	e004      	b.n	800384c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800384c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	429a      	cmp	r2, r3
 8003854:	d903      	bls.n	800385e <pvPortMalloc+0xa6>
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f1      	bne.n	8003842 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800385e:	4b37      	ldr	r3, [pc, #220]	@ (800393c <pvPortMalloc+0x184>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003864:	429a      	cmp	r2, r3
 8003866:	d051      	beq.n	800390c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2208      	movs	r2, #8
 800386e:	4413      	add	r3, r2
 8003870:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	1ad2      	subs	r2, r2, r3
 8003882:	2308      	movs	r3, #8
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	429a      	cmp	r2, r3
 8003888:	d920      	bls.n	80038cc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800388a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4413      	add	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00b      	beq.n	80038b4 <pvPortMalloc+0xfc>
	__asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	613b      	str	r3, [r7, #16]
}
 80038ae:	bf00      	nop
 80038b0:	bf00      	nop
 80038b2:	e7fd      	b.n	80038b0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	1ad2      	subs	r2, r2, r3
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80038c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80038c6:	69b8      	ldr	r0, [r7, #24]
 80038c8:	f000 f90a 	bl	8003ae0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003944 <pvPortMalloc+0x18c>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003944 <pvPortMalloc+0x18c>)
 80038d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038da:	4b1a      	ldr	r3, [pc, #104]	@ (8003944 <pvPortMalloc+0x18c>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	4b1b      	ldr	r3, [pc, #108]	@ (800394c <pvPortMalloc+0x194>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d203      	bcs.n	80038ee <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80038e6:	4b17      	ldr	r3, [pc, #92]	@ (8003944 <pvPortMalloc+0x18c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a18      	ldr	r2, [pc, #96]	@ (800394c <pvPortMalloc+0x194>)
 80038ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	4b13      	ldr	r3, [pc, #76]	@ (8003940 <pvPortMalloc+0x188>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003902:	4b13      	ldr	r3, [pc, #76]	@ (8003950 <pvPortMalloc+0x198>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	3301      	adds	r3, #1
 8003908:	4a11      	ldr	r2, [pc, #68]	@ (8003950 <pvPortMalloc+0x198>)
 800390a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800390c:	f7ff fa46 	bl	8002d9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <pvPortMalloc+0x17a>
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	60fb      	str	r3, [r7, #12]
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	e7fd      	b.n	800392e <pvPortMalloc+0x176>
	return pvReturn;
 8003932:	69fb      	ldr	r3, [r7, #28]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3728      	adds	r7, #40	@ 0x28
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	200040f0 	.word	0x200040f0
 8003940:	20004104 	.word	0x20004104
 8003944:	200040f4 	.word	0x200040f4
 8003948:	200040e8 	.word	0x200040e8
 800394c:	200040f8 	.word	0x200040f8
 8003950:	200040fc 	.word	0x200040fc

08003954 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d04f      	beq.n	8003a06 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003966:	2308      	movs	r3, #8
 8003968:	425b      	negs	r3, r3
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4413      	add	r3, r2
 800396e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	4b25      	ldr	r3, [pc, #148]	@ (8003a10 <vPortFree+0xbc>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10b      	bne.n	800399a <vPortFree+0x46>
	__asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	60fb      	str	r3, [r7, #12]
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop
 8003998:	e7fd      	b.n	8003996 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <vPortFree+0x66>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	60bb      	str	r3, [r7, #8]
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop
 80039b8:	e7fd      	b.n	80039b6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	4b14      	ldr	r3, [pc, #80]	@ (8003a10 <vPortFree+0xbc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d01e      	beq.n	8003a06 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d11a      	bne.n	8003a06 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003a10 <vPortFree+0xbc>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	43db      	mvns	r3, r3
 80039da:	401a      	ands	r2, r3
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80039e0:	f7ff f9ce 	bl	8002d80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <vPortFree+0xc0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4413      	add	r3, r2
 80039ee:	4a09      	ldr	r2, [pc, #36]	@ (8003a14 <vPortFree+0xc0>)
 80039f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039f2:	6938      	ldr	r0, [r7, #16]
 80039f4:	f000 f874 	bl	8003ae0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80039f8:	4b07      	ldr	r3, [pc, #28]	@ (8003a18 <vPortFree+0xc4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3301      	adds	r3, #1
 80039fe:	4a06      	ldr	r2, [pc, #24]	@ (8003a18 <vPortFree+0xc4>)
 8003a00:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003a02:	f7ff f9cb 	bl	8002d9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003a06:	bf00      	nop
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20004104 	.word	0x20004104
 8003a14:	200040f4 	.word	0x200040f4
 8003a18:	20004100 	.word	0x20004100

08003a1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a22:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003a26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003a28:	4b27      	ldr	r3, [pc, #156]	@ (8003ac8 <prvHeapInit+0xac>)
 8003a2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00c      	beq.n	8003a50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3307      	adds	r3, #7
 8003a3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0307 	bic.w	r3, r3, #7
 8003a42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac8 <prvHeapInit+0xac>)
 8003a4c:	4413      	add	r3, r2
 8003a4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a54:	4a1d      	ldr	r2, [pc, #116]	@ (8003acc <prvHeapInit+0xb0>)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8003acc <prvHeapInit+0xb0>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	4413      	add	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003a68:	2208      	movs	r2, #8
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0307 	bic.w	r3, r3, #7
 8003a76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4a15      	ldr	r2, [pc, #84]	@ (8003ad0 <prvHeapInit+0xb4>)
 8003a7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003a7e:	4b14      	ldr	r3, [pc, #80]	@ (8003ad0 <prvHeapInit+0xb4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2200      	movs	r2, #0
 8003a84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003a86:	4b12      	ldr	r3, [pc, #72]	@ (8003ad0 <prvHeapInit+0xb4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	1ad2      	subs	r2, r2, r3
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad0 <prvHeapInit+0xb4>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad4 <prvHeapInit+0xb8>)
 8003aaa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4a09      	ldr	r2, [pc, #36]	@ (8003ad8 <prvHeapInit+0xbc>)
 8003ab2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ab4:	4b09      	ldr	r3, [pc, #36]	@ (8003adc <prvHeapInit+0xc0>)
 8003ab6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003aba:	601a      	str	r2, [r3, #0]
}
 8003abc:	bf00      	nop
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	200004e8 	.word	0x200004e8
 8003acc:	200040e8 	.word	0x200040e8
 8003ad0:	200040f0 	.word	0x200040f0
 8003ad4:	200040f8 	.word	0x200040f8
 8003ad8:	200040f4 	.word	0x200040f4
 8003adc:	20004104 	.word	0x20004104

08003ae0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ae8:	4b28      	ldr	r3, [pc, #160]	@ (8003b8c <prvInsertBlockIntoFreeList+0xac>)
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	e002      	b.n	8003af4 <prvInsertBlockIntoFreeList+0x14>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d8f7      	bhi.n	8003aee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	4413      	add	r3, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d108      	bne.n	8003b22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	441a      	add	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	441a      	add	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d118      	bne.n	8003b68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	4b15      	ldr	r3, [pc, #84]	@ (8003b90 <prvInsertBlockIntoFreeList+0xb0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d00d      	beq.n	8003b5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	441a      	add	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	e008      	b.n	8003b70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b90 <prvInsertBlockIntoFreeList+0xb0>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	e003      	b.n	8003b70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d002      	beq.n	8003b7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b7e:	bf00      	nop
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	200040e8 	.word	0x200040e8
 8003b90:	200040f0 	.word	0x200040f0

08003b94 <memset>:
 8003b94:	4402      	add	r2, r0
 8003b96:	4603      	mov	r3, r0
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d100      	bne.n	8003b9e <memset+0xa>
 8003b9c:	4770      	bx	lr
 8003b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba2:	e7f9      	b.n	8003b98 <memset+0x4>

08003ba4 <_reclaim_reent>:
 8003ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c5c <_reclaim_reent+0xb8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4283      	cmp	r3, r0
 8003baa:	b570      	push	{r4, r5, r6, lr}
 8003bac:	4604      	mov	r4, r0
 8003bae:	d053      	beq.n	8003c58 <_reclaim_reent+0xb4>
 8003bb0:	69c3      	ldr	r3, [r0, #28]
 8003bb2:	b31b      	cbz	r3, 8003bfc <_reclaim_reent+0x58>
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	b163      	cbz	r3, 8003bd2 <_reclaim_reent+0x2e>
 8003bb8:	2500      	movs	r5, #0
 8003bba:	69e3      	ldr	r3, [r4, #28]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	5959      	ldr	r1, [r3, r5]
 8003bc0:	b9b1      	cbnz	r1, 8003bf0 <_reclaim_reent+0x4c>
 8003bc2:	3504      	adds	r5, #4
 8003bc4:	2d80      	cmp	r5, #128	@ 0x80
 8003bc6:	d1f8      	bne.n	8003bba <_reclaim_reent+0x16>
 8003bc8:	69e3      	ldr	r3, [r4, #28]
 8003bca:	4620      	mov	r0, r4
 8003bcc:	68d9      	ldr	r1, [r3, #12]
 8003bce:	f000 f86d 	bl	8003cac <_free_r>
 8003bd2:	69e3      	ldr	r3, [r4, #28]
 8003bd4:	6819      	ldr	r1, [r3, #0]
 8003bd6:	b111      	cbz	r1, 8003bde <_reclaim_reent+0x3a>
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f000 f867 	bl	8003cac <_free_r>
 8003bde:	69e3      	ldr	r3, [r4, #28]
 8003be0:	689d      	ldr	r5, [r3, #8]
 8003be2:	b15d      	cbz	r5, 8003bfc <_reclaim_reent+0x58>
 8003be4:	4629      	mov	r1, r5
 8003be6:	4620      	mov	r0, r4
 8003be8:	682d      	ldr	r5, [r5, #0]
 8003bea:	f000 f85f 	bl	8003cac <_free_r>
 8003bee:	e7f8      	b.n	8003be2 <_reclaim_reent+0x3e>
 8003bf0:	680e      	ldr	r6, [r1, #0]
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f000 f85a 	bl	8003cac <_free_r>
 8003bf8:	4631      	mov	r1, r6
 8003bfa:	e7e1      	b.n	8003bc0 <_reclaim_reent+0x1c>
 8003bfc:	6961      	ldr	r1, [r4, #20]
 8003bfe:	b111      	cbz	r1, 8003c06 <_reclaim_reent+0x62>
 8003c00:	4620      	mov	r0, r4
 8003c02:	f000 f853 	bl	8003cac <_free_r>
 8003c06:	69e1      	ldr	r1, [r4, #28]
 8003c08:	b111      	cbz	r1, 8003c10 <_reclaim_reent+0x6c>
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f000 f84e 	bl	8003cac <_free_r>
 8003c10:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003c12:	b111      	cbz	r1, 8003c1a <_reclaim_reent+0x76>
 8003c14:	4620      	mov	r0, r4
 8003c16:	f000 f849 	bl	8003cac <_free_r>
 8003c1a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c1c:	b111      	cbz	r1, 8003c24 <_reclaim_reent+0x80>
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f000 f844 	bl	8003cac <_free_r>
 8003c24:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003c26:	b111      	cbz	r1, 8003c2e <_reclaim_reent+0x8a>
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f000 f83f 	bl	8003cac <_free_r>
 8003c2e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003c30:	b111      	cbz	r1, 8003c38 <_reclaim_reent+0x94>
 8003c32:	4620      	mov	r0, r4
 8003c34:	f000 f83a 	bl	8003cac <_free_r>
 8003c38:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003c3a:	b111      	cbz	r1, 8003c42 <_reclaim_reent+0x9e>
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f000 f835 	bl	8003cac <_free_r>
 8003c42:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003c44:	b111      	cbz	r1, 8003c4c <_reclaim_reent+0xa8>
 8003c46:	4620      	mov	r0, r4
 8003c48:	f000 f830 	bl	8003cac <_free_r>
 8003c4c:	6a23      	ldr	r3, [r4, #32]
 8003c4e:	b11b      	cbz	r3, 8003c58 <_reclaim_reent+0xb4>
 8003c50:	4620      	mov	r0, r4
 8003c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003c56:	4718      	bx	r3
 8003c58:	bd70      	pop	{r4, r5, r6, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000010 	.word	0x20000010

08003c60 <__libc_init_array>:
 8003c60:	b570      	push	{r4, r5, r6, lr}
 8003c62:	4d0d      	ldr	r5, [pc, #52]	@ (8003c98 <__libc_init_array+0x38>)
 8003c64:	4c0d      	ldr	r4, [pc, #52]	@ (8003c9c <__libc_init_array+0x3c>)
 8003c66:	1b64      	subs	r4, r4, r5
 8003c68:	10a4      	asrs	r4, r4, #2
 8003c6a:	2600      	movs	r6, #0
 8003c6c:	42a6      	cmp	r6, r4
 8003c6e:	d109      	bne.n	8003c84 <__libc_init_array+0x24>
 8003c70:	4d0b      	ldr	r5, [pc, #44]	@ (8003ca0 <__libc_init_array+0x40>)
 8003c72:	4c0c      	ldr	r4, [pc, #48]	@ (8003ca4 <__libc_init_array+0x44>)
 8003c74:	f000 f870 	bl	8003d58 <_init>
 8003c78:	1b64      	subs	r4, r4, r5
 8003c7a:	10a4      	asrs	r4, r4, #2
 8003c7c:	2600      	movs	r6, #0
 8003c7e:	42a6      	cmp	r6, r4
 8003c80:	d105      	bne.n	8003c8e <__libc_init_array+0x2e>
 8003c82:	bd70      	pop	{r4, r5, r6, pc}
 8003c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c88:	4798      	blx	r3
 8003c8a:	3601      	adds	r6, #1
 8003c8c:	e7ee      	b.n	8003c6c <__libc_init_array+0xc>
 8003c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c92:	4798      	blx	r3
 8003c94:	3601      	adds	r6, #1
 8003c96:	e7f2      	b.n	8003c7e <__libc_init_array+0x1e>
 8003c98:	08003dd8 	.word	0x08003dd8
 8003c9c:	08003dd8 	.word	0x08003dd8
 8003ca0:	08003dd8 	.word	0x08003dd8
 8003ca4:	08003ddc 	.word	0x08003ddc

08003ca8 <__retarget_lock_acquire_recursive>:
 8003ca8:	4770      	bx	lr

08003caa <__retarget_lock_release_recursive>:
 8003caa:	4770      	bx	lr

08003cac <_free_r>:
 8003cac:	b538      	push	{r3, r4, r5, lr}
 8003cae:	4605      	mov	r5, r0
 8003cb0:	2900      	cmp	r1, #0
 8003cb2:	d041      	beq.n	8003d38 <_free_r+0x8c>
 8003cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cb8:	1f0c      	subs	r4, r1, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bfb8      	it	lt
 8003cbe:	18e4      	addlt	r4, r4, r3
 8003cc0:	f000 f83e 	bl	8003d40 <__malloc_lock>
 8003cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d3c <_free_r+0x90>)
 8003cc6:	6813      	ldr	r3, [r2, #0]
 8003cc8:	b933      	cbnz	r3, 8003cd8 <_free_r+0x2c>
 8003cca:	6063      	str	r3, [r4, #4]
 8003ccc:	6014      	str	r4, [r2, #0]
 8003cce:	4628      	mov	r0, r5
 8003cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cd4:	f000 b83a 	b.w	8003d4c <__malloc_unlock>
 8003cd8:	42a3      	cmp	r3, r4
 8003cda:	d908      	bls.n	8003cee <_free_r+0x42>
 8003cdc:	6820      	ldr	r0, [r4, #0]
 8003cde:	1821      	adds	r1, r4, r0
 8003ce0:	428b      	cmp	r3, r1
 8003ce2:	bf01      	itttt	eq
 8003ce4:	6819      	ldreq	r1, [r3, #0]
 8003ce6:	685b      	ldreq	r3, [r3, #4]
 8003ce8:	1809      	addeq	r1, r1, r0
 8003cea:	6021      	streq	r1, [r4, #0]
 8003cec:	e7ed      	b.n	8003cca <_free_r+0x1e>
 8003cee:	461a      	mov	r2, r3
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	b10b      	cbz	r3, 8003cf8 <_free_r+0x4c>
 8003cf4:	42a3      	cmp	r3, r4
 8003cf6:	d9fa      	bls.n	8003cee <_free_r+0x42>
 8003cf8:	6811      	ldr	r1, [r2, #0]
 8003cfa:	1850      	adds	r0, r2, r1
 8003cfc:	42a0      	cmp	r0, r4
 8003cfe:	d10b      	bne.n	8003d18 <_free_r+0x6c>
 8003d00:	6820      	ldr	r0, [r4, #0]
 8003d02:	4401      	add	r1, r0
 8003d04:	1850      	adds	r0, r2, r1
 8003d06:	4283      	cmp	r3, r0
 8003d08:	6011      	str	r1, [r2, #0]
 8003d0a:	d1e0      	bne.n	8003cce <_free_r+0x22>
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	6053      	str	r3, [r2, #4]
 8003d12:	4408      	add	r0, r1
 8003d14:	6010      	str	r0, [r2, #0]
 8003d16:	e7da      	b.n	8003cce <_free_r+0x22>
 8003d18:	d902      	bls.n	8003d20 <_free_r+0x74>
 8003d1a:	230c      	movs	r3, #12
 8003d1c:	602b      	str	r3, [r5, #0]
 8003d1e:	e7d6      	b.n	8003cce <_free_r+0x22>
 8003d20:	6820      	ldr	r0, [r4, #0]
 8003d22:	1821      	adds	r1, r4, r0
 8003d24:	428b      	cmp	r3, r1
 8003d26:	bf04      	itt	eq
 8003d28:	6819      	ldreq	r1, [r3, #0]
 8003d2a:	685b      	ldreq	r3, [r3, #4]
 8003d2c:	6063      	str	r3, [r4, #4]
 8003d2e:	bf04      	itt	eq
 8003d30:	1809      	addeq	r1, r1, r0
 8003d32:	6021      	streq	r1, [r4, #0]
 8003d34:	6054      	str	r4, [r2, #4]
 8003d36:	e7ca      	b.n	8003cce <_free_r+0x22>
 8003d38:	bd38      	pop	{r3, r4, r5, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20004244 	.word	0x20004244

08003d40 <__malloc_lock>:
 8003d40:	4801      	ldr	r0, [pc, #4]	@ (8003d48 <__malloc_lock+0x8>)
 8003d42:	f7ff bfb1 	b.w	8003ca8 <__retarget_lock_acquire_recursive>
 8003d46:	bf00      	nop
 8003d48:	20004240 	.word	0x20004240

08003d4c <__malloc_unlock>:
 8003d4c:	4801      	ldr	r0, [pc, #4]	@ (8003d54 <__malloc_unlock+0x8>)
 8003d4e:	f7ff bfac 	b.w	8003caa <__retarget_lock_release_recursive>
 8003d52:	bf00      	nop
 8003d54:	20004240 	.word	0x20004240

08003d58 <_init>:
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	bf00      	nop
 8003d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5e:	bc08      	pop	{r3}
 8003d60:	469e      	mov	lr, r3
 8003d62:	4770      	bx	lr

08003d64 <_fini>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	bf00      	nop
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr
